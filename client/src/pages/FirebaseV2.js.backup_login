import React, { useState, useEffect, useMemo, useCallback, Suspense } from 'react';
import VinScanner from '../components/VinScanner';
import { useToast } from '../components/Toast';
import axios from 'axios';

// 🎨 Modern Design System

// ⚙️ Settings Panel
import SettingsPanel from '../components/SettingsPanel';

// 📊 Enhanced Reports Component
import SimpleReports from '../components/SimpleReports';

// 🚀 Premium Enterprise Components - Currently Integrated
import { 
  GlassCard, 
  ProgressRing, 
  StatCard,
} from '../components/PremiumUI';

// 📊 Advanced Data Visualizations
import { 
} from '../components/DataVisualization';

// 🤖 AI-Powered Analytics
import { 
} from '../utils/advancedAlgorithms';

// Professional error logging and performance monitoring
const Logger = {
  error: (message, error, context = {}) => {
    console.error(`[CleanupTracker Error] ${message}:`, {
      error: error?.message || error,
      stack: error?.stack,
      timestamp: new Date().toISOString(),
      context
    });
    
    // In production, you would send this to an error tracking service
    if (process.env.NODE_ENV === 'production') {
      // Example: Sentry.captureException(error, { extra: context });
    }
  },
  
  warn: (message, context = {}) => {
    console.warn(`[CleanupTracker Warning] ${message}:`, {
      timestamp: new Date().toISOString(),
      context
    });
  },
  
  info: (message, context = {}) => {
    if (process.env.NODE_ENV === 'development') {
      console.info(`[CleanupTracker Info] ${message}:`, {
        timestamp: new Date().toISOString(),
        context
      });
    }
  },
  
  perf: (label, fn) => {
    const start = performance.now();
    try {
      const result = fn();
      const duration = performance.now() - start;
      if (duration > 100) { // Log slow operations
        Logger.warn(`Slow operation: ${label}`, { duration: `${duration.toFixed(2)}ms` });
      }
      return result;
    } catch (error) {
      Logger.error(`Performance tracking failed for ${label}`, error);
      throw error;
    }
  }
};

// Security: Input sanitization utilities
const Security = {
  sanitizeInput: (input) => {
    if (typeof input !== 'string') return input;
    return input
      .replace(/[<>]/g, '') // Basic XSS prevention
      .trim()
      .slice(0, 1000); // Prevent extremely long inputs
  },
  
  sanitizeHtml: (html) => {
    const div = document.createElement('div');
    div.textContent = html;
    return div.innerHTML;
  },
  
  validateVin: (vin) => {
    if (!vin || typeof vin !== 'string') return false;
    // VIN validation: 17 characters, alphanumeric except I, O, Q
    return /^[A-HJ-NPR-Z0-9]{17}$/i.test(vin);
  }
};

// Utility functions for date/time handling with Eastern Time support
const DateUtils = {
  // Get current local date in YYYY-MM-DD format (Eastern Time)
  getLocalDateString: (date = new Date()) => {
    return new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
      .toISOString().slice(0, 10);
  },
  
  // Check if date is today (Eastern Time)
  isToday: (date) => {
    if (!date) return false;
    const inputDate = new Date(date);
    if (isNaN(inputDate.getTime())) return false;
    return DateUtils.getLocalDateString(inputDate) === DateUtils.getLocalDateString();
  },
  
  // Check if date is this week (Eastern Time)
  isThisWeek: (date) => {
    if (!date) return false;
    const inputDate = new Date(date);
    if (isNaN(inputDate.getTime())) return false;
    const now = new Date();
    const weekStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());
    const weekEnd = new Date(weekStart.getTime() + (7 * 24 * 60 * 60 * 1000));
    return inputDate >= weekStart && inputDate < weekEnd;
  },
  
  // Check if date is this month (Eastern Time)
  isThisMonth: (date) => {
    if (!date) return false;
    const inputDate = new Date(date);
    if (isNaN(inputDate.getTime())) return false;
    const now = new Date();
    return inputDate.getMonth() === now.getMonth() && inputDate.getFullYear() === now.getFullYear();
  },
  
  // Format date safely
  formatDate: (date, options = {}) => {
    if (!date) return 'N/A';
    const d = new Date(date);
    if (isNaN(d.getTime())) return 'Invalid Date';
    return d.toLocaleString('en-US', { 
      timeZone: 'America/New_York',
      ...options 
    });
  },
  
  // Format duration from minutes to readable format
  formatDuration: (minutes) => {
    if (!minutes || minutes < 0) return 'N/A';
    // Cap unrealistic durations at 24 hours
    const cappedMinutes = Math.min(minutes, 24 * 60);
    const hours = Math.floor(cappedMinutes / 60);
    const mins = Math.round(cappedMinutes % 60);
    if (hours === 0) return `${mins}min`;
    return `${hours}h ${mins}m`;
  },
  
  // Calculate duration between two dates in minutes
  calculateDuration: (startDate, endDate) => {
    if (!startDate || !endDate) return 0;
    const start = new Date(startDate);
    const end = new Date(endDate);
    if (isNaN(start.getTime()) || isNaN(end.getTime())) return 0;
    const diffMs = end.getTime() - start.getTime();
    const diffMins = Math.floor(diffMs / (1000 * 60));
    // Cap at 24 hours to prevent unrealistic durations
    return Math.max(0, Math.min(diffMins, 24 * 60));
  },
  
  // Validate if a date string/object is valid
  isValidDate: (date) => {
    if (!date) return false;
    const d = new Date(date);
    return !isNaN(d.getTime());
  },

  // Format date and time for display
  formatDateTime: (date) => {
    if (!date) return 'N/A';
    const d = new Date(date);
    if (isNaN(d.getTime())) return 'Invalid Date';
    return d.toLocaleString('en-US', { 
      timeZone: 'America/New_York',
      month: 'numeric',
      day: 'numeric',
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
  },

  // Get a valid date from various formats
  getValidDate: (date) => {
    if (!date) return null;
    const d = new Date(date);
    return isNaN(d.getTime()) ? null : d;
  }
};

// Enhanced Live Timer Component with error handling
function LiveTimer({ startTime, className = "text-lg font-mono" }) {
  const [elapsed, setElapsed] = useState(0);
  const [isValid, setIsValid] = useState(true);
  
  useEffect(() => {
    if (!startTime || !DateUtils.isValidDate(startTime)) {
      setIsValid(false);
      setElapsed(0);
      return;
    }
    
    setIsValid(true);
    const start = new Date(startTime).getTime();
    const update = () => {
      const now = Date.now();
      const diff = Math.max(0, Math.floor((now - start) / 1000));
      // Cap at 24 hours to prevent display issues
      setElapsed(Math.min(diff, 24 * 60 * 60));
    };
    
    update();
    const interval = setInterval(update, 1000);
    
    return () => clearInterval(interval);
  }, [startTime]);
  
  const formatTime = (seconds) => {
    if (!isValid || seconds === 0) return '--:--:--';
    const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
    const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
    const s = (seconds % 60).toString().padStart(2, '0');
    return `${h}:${m}:${s}`;
  };
  
  if (!isValid) {
    return <span className={className}>--:--:--</span>;
  }
  
  return <span className={className}>{formatTime(elapsed)}</span>;
}

// Create API instance with proper base URL
const V2 = axios.create({
  baseURL: '/api/v2',
  timeout: 10000,
});

// Login Component with gradient/glass theme
function LoginForm({ onLogin }) {
  const [employeeId, setEmployeeId] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [siteTitle, setSiteTitle] = useState('Cleanup Tracker');

  // Load settings for site title
  useEffect(() => {
    (async () => {
      try {
        const res = await V2.get('/settings');
        const title = res.data?.siteTitle || 'Cleanup Tracker';
        setSiteTitle(title);
      } catch (_) {
        // ignore, fallback title
      }
    })();
  }, []);

  const handleSubmit = useCallback(async (e) => {
    if (e && e.preventDefault) e.preventDefault();
    setIsLoading(true);
    try {
      if (!employeeId) {
        alert('Enter your employee ID');
        return;
      }

      // Temporary workaround: static user authentication (bypasses D1 issue)
      const staticUsers = {
        '0000': { id: 1, employeeId: '0000', name: 'Admin', pin: '0000', role: 'admin', employeeNumber: '0000' },
        '1234': { id: 2, employeeId: '1234', name: 'Test User', pin: '1234', role: 'technician', employeeNumber: '1234' },
        '0001': { id: 3, employeeId: '0001', name: 'Manager', pin: '0001', role: 'manager', employeeNumber: '0001' },
        '1709': { id: 4, employeeId: '1709', name: 'Brian', pin: '1709', role: 'detailer', employeeNumber: '1709' },
        '5555': { id: 5, employeeId: '5555', name: 'Test New User', pin: '5555', role: 'technician', employeeNumber: '5555' }
      };

      const user = staticUsers[employeeId];
      if (user) {
        console.log('🚀 Temporary static login successful for:', user.name);
        onLogin(user);
      } else {
        alert('Invalid employee ID. Try: 0000, 1234, 0001, 1709, or 5555');
      }
    } catch (err) {
      const errorMsg = err.response?.data?.error || err.message || 'Login failed';
      alert(errorMsg);
    } finally {
      setIsLoading(false);
    }
  }, [employeeId, onLogin]);

  // Add keyboard support for number entry
  useEffect(() => {
    const handleKeyPress = (e) => {
      if (isLoading) return;
      
      // Number keys (0-9)
      if (e.key >= '0' && e.key <= '9') {
        if (employeeId.length < 4) {
          setEmployeeId(prev => prev + e.key);
        }
      }
      // Backspace or Delete
      else if (e.key === 'Backspace' || e.key === 'Delete') {
        setEmployeeId(prev => prev.slice(0, -1));
      }
      // Escape to clear
      else if (e.key === 'Escape') {
        setEmployeeId('');
      }
      // Enter to submit
      else if (e.key === 'Enter' && employeeId.length === 4) {
        handleSubmit();
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [employeeId, isLoading, handleSubmit]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-gray-50 to-indigo-50 p-4">
      {/* Responsive Login Container - Vertical on Mobile, Horizontal on Desktop */}
      <div className="w-full max-w-7xl">
        <div className="flex flex-col lg:flex-row items-center justify-center gap-8 lg:gap-12">
          
          {/* Left Side: Branding (Hidden on mobile, shown on desktop) */}
          <div className="hidden lg:block flex-1 max-w-md">
            <div className="text-left space-y-6">
              <div className="w-24 h-24 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-3xl flex items-center justify-center shadow-2xl">
                <svg className="w-14 h-14 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h1 className="text-5xl font-bold text-gray-900 mb-4">{siteTitle}</h1>
                <p className="text-xl text-gray-600 font-medium mb-6">Mission Ford of Dearborn</p>
                <p className="text-gray-500 text-lg leading-relaxed">
                  Professional vehicle detailing management system for detailers, sales team, and management.
                </p>
              </div>
              <div className="flex items-center gap-4 text-sm text-gray-600">
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span>Real-time Tracking</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                  <span>Secure Access</span>
                </div>
              </div>
            </div>
          </div>

          {/* Right Side: Login Card */}
          <div className="w-full lg:flex-1 max-w-md">
            <div className="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-gray-200/50 p-8 md:p-10 transform transition-all duration-300 hover:shadow-3xl">
              
              {/* Mobile-only branding (shown on mobile, hidden on desktop) */}
              <div className="text-center mb-8 lg:hidden">
                <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl mx-auto mb-4 flex items-center justify-center shadow-lg">
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                <h2 className="text-2xl font-bold text-gray-900 mb-1">{siteTitle}</h2>
                <p className="text-sm text-gray-600 font-medium">Mission Ford of Dearborn</p>
              </div>

              {/* Desktop-only header */}
              <div className="hidden lg:block text-center mb-8">
                <h2 className="text-2xl font-bold text-gray-900 mb-2">Welcome Back</h2>
                <p className="text-gray-600">Enter your 4-digit PIN to continue</p>
              </div>

              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="relative">
                  <label className="block text-sm font-semibold text-gray-700 mb-3">Employee PIN</label>
                  
                  {/* PIN Display */}
                  <div className="w-full bg-gradient-to-br from-gray-50 to-gray-100 border-2 border-gray-200 rounded-2xl py-5 px-6 mb-6 shadow-inner">
                    <div className="text-center">
                      <div className="text-4xl font-mono text-gray-900 tracking-[0.5em] min-h-[48px] flex items-center justify-center">
                        {employeeId.replace(/./g, '●') || <span className="text-gray-400 text-xl tracking-normal">Enter PIN</span>}
                      </div>
                    </div>
                  </div>
                  
                  {/* Number Pad - Classic Calculator Style (3x4 Grid) */}
                  <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: '0.75rem'}} className="max-w-sm mx-auto">
                    {/* Row 1: 1, 2, 3 */}
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '1'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      1
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '2'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      2
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '3'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      3
                    </button>

                    {/* Row 2: 4, 5, 6 */}
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '4'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      4
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '5'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      5
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '6'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      6
                    </button>

                    {/* Row 3: 7, 8, 9 */}
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '7'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      7
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '8'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      8
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '9'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      9
                    </button>

                    {/* Row 4: Clear, 0, Backspace */}
                    <button
                      type="button"
                      onClick={() => setEmployeeId('')}
                      className="bg-red-50 hover:bg-red-100 border-2 border-red-200 hover:border-red-400 rounded-xl py-4 px-6 text-base font-bold text-red-700 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      Clear
                    </button>
                    <button
                      type="button"
                      onClick={() => { if (employeeId.length < 4) setEmployeeId(employeeId + '0'); }}
                      className="bg-white hover:bg-blue-50 border-2 border-gray-200 hover:border-blue-400 rounded-xl py-4 px-6 text-2xl font-bold text-gray-900 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      0
                    </button>
                    <button
                      type="button"
                      onClick={() => setEmployeeId(employeeId.slice(0, -1))}
                      className="bg-yellow-50 hover:bg-yellow-100 border-2 border-yellow-200 hover:border-yellow-400 rounded-xl py-4 px-6 text-xl font-bold text-yellow-700 transition-all duration-200 shadow-sm hover:shadow-md active:scale-95"
                    >
                      ⌫
                    </button>
                  </div>

                  {/* Keyboard hint for desktop */}
                  <p className="hidden md:block text-xs text-gray-500 text-center mt-4">
                    💡 Tip: You can also use your keyboard to enter the PIN
                  </p>
                </div>

                <button
                  type="submit"
                  disabled={isLoading || employeeId.length !== 4}
                  className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-bold py-4 px-6 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none disabled:hover:shadow-lg"
                >
                  {isLoading ? (
                    <div className="flex items-center justify-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Signing In...
                    </div>
                  ) : (
                    <span className="flex items-center justify-center gap-2">
                      <span>Sign In</span>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                      </svg>
                    </span>
                  )}
                </button>
                
                <div className="text-center mt-6">
                  <div className="flex items-center justify-center gap-4 text-xs text-gray-500">
                    <span className="flex items-center gap-1">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                      Secure Login
                    </span>
                    <span>•</span>
                    <span>Detailers • Sales • Management</span>
                  </div>
                </div>
              </form>
            </div>
          </div>

        </div>
      </div>
    </div>
  );
}

// Main App Component with Mobile-First Design
function MainApp({ user, onLogout, onError }) {
  const [view, setView] = useState('dashboard');
  const [jobs, setJobs] = useState([]);
  const [users, setUsers] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [isSearching, setIsSearching] = useState(false);
  const [showScanner, setShowScanner] = useState(false);
  const [hasSearched, setHasSearched] = useState(false);
  const [settings, setSettings] = useState({ siteTitle: 'Cleanup Tracker' });
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [componentError, setComponentError] = useState(null);
  
  // 🎨 Modern Theme State - Always Dark Mode
  const [theme, setTheme] = useState('dark');
  const [showSettings, setShowSettings] = useState(false);
  
  // Apply theme to document
  useEffect(() => {
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('app-theme', theme);
  }, [theme]);

  // Enhanced toast toast system
  const toast = useToast();

  // Global error handler with proper error boundary
  const handleError = useCallback((error, errorInfo) => {
    console.error('Component error:', error, errorInfo);
    setComponentError(error.message);
    toast.error('Something went wrong. Please refresh the page.');
  }, [toast]);

  // Error boundary effect
  useEffect(() => {
    const handleUnhandledError = (event) => {
      handleError(event.error, { componentStack: event.filename });
    };

    const handleUnhandledRejection = (event) => {
      handleError(event.reason, { componentStack: 'Promise rejection' });
    };

    window.addEventListener('error', handleUnhandledError);
    window.addEventListener('unhandledrejection', handleUnhandledRejection);

    return () => {
      window.removeEventListener('error', handleUnhandledError);
      window.removeEventListener('unhandledrejection', handleUnhandledRejection);
    };
  }, [handleError]);

  // Load initial data with useCallback to prevent re-renders
  const loadInitialData = useCallback(async () => {
    // Authentication check - prevent API calls without valid user
    if (!user || !user.id) {
      Logger.warn('LoadInitialData called without authenticated user - aborting');
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      Logger.info('Loading initial data');
      
      // Performance monitoring for data loading
      const startTime = performance.now();
      
      // Enhanced error handling with retries for network failures
      const fetchWithRetry = async (url, retries = 2) => {
        for (let i = 0; i <= retries; i++) {
          try {
            return await V2.get(url);
          } catch (error) {
            if (i === retries) throw error;
            Logger.warn(`Retry ${i + 1} for ${url}`, { error: error.message });
            await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1))); // Exponential backoff
          }
        }
      };

      const [jobsRes, usersRes, settingsRes] = await Promise.all([
        fetchWithRetry('/jobs'),
        fetchWithRetry('/users'),
        fetchWithRetry('/settings').catch(() => {
          Logger.warn('Settings endpoint failed, using defaults');
          return { data: { siteTitle: 'Cleanup Tracker' } };
        })
      ]);
      
      // Data validation and sanitization
      const jobs = Array.isArray(jobsRes.data) ? jobsRes.data : [];
      const usersArray = Array.isArray(usersRes.data) ? usersRes.data : [];
      const settings = settingsRes.data || { siteTitle: 'Cleanup Tracker' };

      // Performance optimization: batch state updates
      setJobs(jobs);
      
      // Enhanced user data processing with validation
      const usersObj = {};
      usersArray.forEach(user => {
        if (user && user.id) {
          // Sanitize user data
          usersObj[user.id] = {
            ...user,
            name: Security.sanitizeInput(user.name || 'Unknown'),
            role: user.role || 'detailer'
          };
        }
      });
      setUsers(usersObj);
      
      // Sanitize settings
      const sanitizedSettings = {
        ...settings,
        siteTitle: Security.sanitizeInput(settings.siteTitle || 'Cleanup Tracker'),
        theme: settings.theme || 'light'
      };
      setSettings(sanitizedSettings);

      // Sync theme with local state if different
      if (sanitizedSettings.theme && sanitizedSettings.theme !== theme) {
        setTheme(sanitizedSettings.theme);
      }
      
      setError(null);
      
      // Performance logging
      const loadTime = performance.now() - startTime;
      Logger.info('Data loading completed', {
        loadTime: `${loadTime.toFixed(2)}ms`,
        jobCount: jobs.length,
        userCount: usersArray.length
      });
      
      if (loadTime > 2000) {
        Logger.warn('Slow data loading detected', { loadTime: `${loadTime.toFixed(2)}ms` });
      }
      
    } catch (err) {
      Logger.error('Failed to load initial data', err, {
        userId: user?.id,
        retryCount: 1
      });
      
      const errorMessage = err.response?.data?.error || err.message || 'Failed to load data';
      setError(errorMessage);
      // Use try-catch for toast to prevent further errors
      try {
        toast.error('Failed to load data. Please try again.');
      } catch (toastError) {
        Logger.warn('Failed to show toast', toastError);
      }

      // Report to parent component if provided
      if (onError) {
        try {
          onError(errorMessage, err);
        } catch (callbackError) {
          Logger.warn('Failed to call onError callback', callbackError);
        }
      }
    } finally {
      setLoading(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // Empty dependencies to prevent infinite loops

  // Network status monitoring
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      toast.success('Connection restored');
    };
    const handleOffline = () => {
      setIsOnline(false);
      toast.warning('Connection lost - working offline');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [toast]);

  // Load data on mount and set up auto-refresh with authentication check
  useEffect(() => {
    // Add a small delay to ensure authentication state is stable
    const timer = setTimeout(() => {
      if (user && user.id) {
        Logger.info('Starting initial data load for authenticated user', { userId: user.id });
        loadInitialData();
      } else {
        Logger.warn('Skipping initial data load - user not authenticated');
      }
    }, 100); // 100ms delay to ensure authentication is stable

    // Set up auto-refresh every 30 seconds for real-time updates
    const refreshInterval = setInterval(() => {
      if (!loading && user && user.id) {
        loadInitialData();
      }
    }, 30000);

    return () => {
      clearTimeout(timer);
      clearInterval(refreshInterval);
    };
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user]); // Only depend on user to prevent infinite loops

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyPress = (event) => {
      // Only handle shortcuts if not typing in an input
      if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
        return;
      }

      if (event.ctrlKey || event.metaKey) {
        switch (event.key) {
          case 'r':
            event.preventDefault();
            loadInitialData();
            toast.success('Data refreshed');
            break;
          case '1':
            event.preventDefault();
            setView('dashboard');
            break;
          case '2':
            event.preventDefault();
            if (user.role !== 'detailer') setView('jobs');
            else setView('jobs');
            break;
          case '3':
            event.preventDefault();
            if (user.role === 'manager') setView('users');
            break;
          case '4':
            event.preventDefault();
            if (user.role === 'manager') setView('reports');
            break;
          default:
            break;
        }
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user.role]); // Removed loadInitialData and toast to prevent loops

    // One-time inventory warm-up: if first search returns empty and not yet warmed, trigger refresh
    useEffect(() => {
      (async () => {
        try {
          // quick diag call to see if vehicles exist
          const d = await V2.get('/diag');
          if (d.data && typeof d.data.vehicles === 'number' && d.data.vehicles === 0) {
            await V2.post('/vehicles/refresh');
          }
    // no-op
        } catch (_) {
          // ignore warm-up errors; user can still search or manual refresh
    // no-op
        }
      })();
    }, []);



  // Allow detailers to freely navigate; no forced redirect.

  // Search functionality
  // Enhanced search functionality with comprehensive validation and error handling
  const handleSearch = useCallback(async (term) => {
    try {
      // Input validation and sanitization
      if (!term || typeof term !== 'string') {
        Logger.warn('Invalid search term provided', { term });
        return;
      }
      
      const sanitizedTerm = Security.sanitizeInput(term.trim());
      if (!sanitizedTerm) {
        toast.warning('Please enter a search term');
        return;
      }
      
      // Length validation for performance
      if (sanitizedTerm.length > 50) {
        toast.warning('Search term too long. Please enter a shorter term.');
        return;
      }
      
      Logger.info('Vehicle search initiated', { 
        searchTerm: sanitizedTerm,
        length: sanitizedTerm.length,
        userId: user.id
      });
      
      setIsSearching(true);
      
      // Performance monitoring for search operations
      const results = await Logger.perf(`vehicle-search-${sanitizedTerm}`, async () => {
        try {
          const response = await V2.get(`/vehicles/search?q=${encodeURIComponent(sanitizedTerm)}`);
          return Array.isArray(response.data) ? response.data : [];
        } catch (error) {
          // Enhanced error handling with specific error types
          if (error.response?.status === 429) {
            throw new Error('Search rate limit exceeded. Please wait a moment and try again.');
          } else if (error.response?.status >= 500) {
            throw new Error('Server error occurred. Please try again later.');
          } else if (!navigator.onLine) {
            throw new Error('No internet connection. Please check your connection and try again.');
          } else {
            throw new Error(error.response?.data?.error || error.message || 'Search failed');
          }
        }
      });
      
      setSearchResults(results);
      setHasSearched(true);
      
      // User feedback based on results
      if (results.length === 0) {
        toast.info(`No vehicles found for "${sanitizedTerm}". Try a different search term.`);
        Logger.info('Search returned no results', { searchTerm: sanitizedTerm });
      } else {
        toast.success(`Found ${results.length} vehicle(s)`);
        Logger.info('Search completed successfully', { 
          searchTerm: sanitizedTerm,
          resultCount: results.length 
        });
      }
      
    } catch (error) {
      Logger.error('Search operation failed', error, { 
        searchTerm: term,
        userId: user.id 
      });
      
      setSearchResults([]);
      setHasSearched(true);
      toast.error(error.message || 'Search failed. Please try again.');
      
    } finally {
      setIsSearching(false);
    }
  }, [user.id, toast]);

  // Enhanced debounced auto-search with professional error handling and performance optimization
  useEffect(() => {
    const sanitizedTerm = Security.sanitizeInput(searchTerm.trim());
    
    if (!sanitizedTerm) {
      setSearchResults([]);
      setHasSearched(false);
      return;
    }
    
    // Intelligent search trigger logic - immediate for VINs, debounced for others
    const isVinLength = sanitizedTerm.length === 17;
    const isValidVin = Security.validateVin(sanitizedTerm);
    const shouldSearch = isVinLength || sanitizedTerm.length >= 3;
    
    if (!shouldSearch) return;
    
    const controller = new AbortController();
    
    // Shorter delay for VINs, longer for regular searches to reduce server load
    const searchDelay = (isVinLength && isValidVin) ? 100 : 600;
    
    const timeoutId = setTimeout(async () => {
      setIsSearching(true);
      
      try {
        Logger.info('Auto-search triggered', { 
          searchTerm: sanitizedTerm, 
          isVin: isValidVin,
          userId: user.id 
        });
        
        const response = await Logger.perf(`auto-search-${sanitizedTerm}`, async () => {
          return await V2.get(`/vehicles/search?q=${encodeURIComponent(sanitizedTerm)}`, { 
            signal: controller.signal,
            timeout: 10000 // 10 second timeout for auto-search
          });
        });
        
        const results = Array.isArray(response.data) ? response.data : [];
        setSearchResults(results);
        setHasSearched(true);
        
        Logger.info('Auto-search completed', { 
          searchTerm: sanitizedTerm,
          resultCount: results.length
        });
        
      } catch (error) {
        if (error.name === 'CanceledError') {
          Logger.info('Auto-search cancelled', { searchTerm: sanitizedTerm });
          return;
        }
        
        Logger.warn('Auto-search failed', error, { 
          searchTerm: sanitizedTerm,
          userId: user.id 
        });
        
        setSearchResults([]);
        setHasSearched(true);
        
        // Don't show toasts for auto-search failures to avoid spam
        if (error.response?.status >= 500) {
          toast.warning('Server temporarily unavailable');
        }
      } finally {
        setIsSearching(false);
      }
    }, searchDelay);
    
    return () => {
      clearTimeout(timeoutId);
      controller.abort();
    };
  }, [searchTerm, user.id, toast]);

  // Scan success handler
  // Enhanced VIN scanner success handler with comprehensive validation
  const handleScanSuccess = useCallback(async (scannedVin) => {
    setShowScanner(false);
    
    try {
      // Input validation and sanitization
      if (!scannedVin) {
        throw new Error('No VIN provided');
      }
      
      const vin = Security.sanitizeInput(scannedVin.toString().toUpperCase().trim());
      
      // Professional VIN validation
      if (!Security.validateVin(vin)) {
        Logger.warn('Invalid VIN scanned', { vin, userId: user.id });
        toast.warning('Invalid VIN format. Please scan again or enter manually.');
        return;
      }
      
      Logger.info('VIN scan successful', { vin, userId: user.id });
      
      // Performance monitoring for VIN operations
      await Logger.perf(`join-by-vin-${vin}`, async () => {
        try {
          // Try to join an in-progress job by VIN
          await V2.put('/vehicles/join-by-vin', { 
            vin, 
            userId: user.id,
            timestamp: new Date().toISOString()
          });
          
          await loadInitialData();
          setSearchTerm(vin);
          setView('dashboard');
          toast.success('Successfully joined existing job!');
          
        } catch (joinError) {
          // Graceful fallback to vehicle search
          Logger.info('No existing job found, searching vehicles', { vin });
          
          try {
            const searchResponse = await Logger.perf(`vehicle-search-${vin}`, async () => {
              return await V2.get(`/vehicles/search?q=${encodeURIComponent(vin)}`);
            });
            
            const results = Array.isArray(searchResponse.data) ? searchResponse.data : [];
            setSearchResults(results);
            setSearchTerm(vin);
            setHasSearched(true);
            setView('jobs');
            
            if (results.length === 0) {
              toast.warning('No vehicles found with this VIN. Please verify and try again.');
            } else {
              toast.success(`Found ${results.length} vehicle(s)`);
            }
            
          } catch (searchError) {
            throw new Error(`Vehicle lookup failed: ${searchError.response?.data?.error || searchError.message}`);
          }
        }
      });
      
    } catch (error) {
      Logger.error('VIN scan processing failed', error, { 
        vin: scannedVin, 
        userId: user.id 
      });
      
      const errorMessage = error.message || 'VIN processing failed';
      toast.error(errorMessage);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [user.id]); // Removed loadInitialData and toast to prevent loops

  // Stop work handler
  const handleStopWork = async () => {
    try {
      const activeJob = jobs.find(j => j.status === 'In Progress' && (
        j.assignedTechnicianIds?.includes(user.id) || 
        j.technicianId === user.id ||
        j.technicianId === user.pin
      ));
      if (!activeJob) return;
      
      // Stop timer and mark as complete with proper timing
      await V2.put(`/jobs/${activeJob.id}/complete`, { 
        userId: user.id,
        completedAt: new Date().toISOString() 
      });
      
      await loadInitialData(); // Reload data
      toast.success('Job completed successfully! 🎉');
    } catch (err) {
      toast.error('Failed to complete job: ' + (err.response?.data?.error || err.message));
    }
  };

  // Delete user handler
  const deleteUser = async (userId) => {
    if (!window.confirm('Are you sure you want to delete this detailer?')) return;
    
    try {
      await V2.delete(`/users/${userId}`);
      await loadInitialData(); // Reload data
      alert('Detailer deleted successfully');
    } catch (err) {
      alert('Failed to delete detailer: ' + (err.response?.data?.error || err.message));
    }
  };

  // Enhanced computed values with performance optimizations
  const activeJobs = useMemo(() => 
    jobs.filter(j => j.status === 'In Progress'), 
    [jobs]
  );
  
  const completedJobs = useMemo(() => 
    jobs.filter(j => j.status === 'Completed' || j.status === 'QC Required'), 
    [jobs]
  );
  
  const userActiveJob = useMemo(() => 
    activeJobs.find(j => 
      j.assignedTechnicianIds?.includes(user.id) || 
      j.technicianId === user.id ||
      j.technicianId === user.pin
    ), 
    [activeJobs, user.id, user.pin]
  );

  // Performance dashboard stats with advanced analytics
  const dashboardStats = useMemo(() => {
    const now = new Date();
    const today = now.toDateString();
    const thisWeekStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - now.getDay());
    
    const todayJobs = completedJobs.filter(job => 
      job.completedAt && new Date(job.completedAt).toDateString() === today
    );
    
    const weekJobs = completedJobs.filter(job => 
      job.completedAt && new Date(job.completedAt) >= thisWeekStart
    );

    // Calculate efficiency metrics
    const calculateAverageTime = (jobList) => {
      if (jobList.length === 0) return 0;
      const totalTime = jobList.reduce((sum, job) => {
        if (job.startedAt && job.completedAt) {
          return sum + (new Date(job.completedAt) - new Date(job.startedAt));
        }
        return sum;
      }, 0);
      return Math.round(totalTime / jobList.length / (1000 * 60)); // Convert to minutes
    };

    return {
      totalActive: activeJobs.length,
      totalCompleted: completedJobs.length,
      todayCompleted: todayJobs.length,
      weekCompleted: weekJobs.length,
      averageTimeToday: calculateAverageTime(todayJobs),
      averageTimeWeek: calculateAverageTime(weekJobs),
      efficiency: weekJobs.length > 0 ? Math.round((todayJobs.length / (weekJobs.length / 7)) * 100) : 0,
      qcRequired: jobs.filter(job => job.status === 'QC Required').length
    };
  }, [activeJobs, completedJobs, jobs]);
  const detailers = useMemo(() => 
    Object.values(users).filter(u => u.role === 'detailer'), 
    [users]
  );

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-gray-900 text-xl">Loading...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl p-6 border border-red-200 shadow-lg max-w-md">
          <h2 className="text-red-800 font-semibold text-lg mb-2">Error</h2>
          <p className="text-red-700 mb-4">{error}</p>
          <button 
            onClick={loadInitialData}
            className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  // Error boundary wrapper
  if (componentError) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl p-8 shadow-lg max-w-md w-full text-center">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 className="text-lg font-semibold text-gray-900 mb-2">Oops! Something went wrong</h3>
          <p className="text-gray-600 mb-4">{componentError}</p>
          <button 
            onClick={() => {
              setComponentError(null);
              window.location.reload();
            }}
            className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
          >
            Refresh Page
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col" style={{
      background: theme === 'dark' ? '#0F172A' : '#F9FAFB',
      color: theme === 'dark' ? '#F1F5F9' : '#111827',
      minHeight: '100vh',
      transition: 'background-color 0.3s ease, color 0.3s ease',
    }}>
      {/* Network Status Indicator */}
      {!isOnline && (
        <div className="bg-red-600 text-white px-4 py-2 text-center text-sm font-medium">
          <svg className="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M18.364 5.636L5.636 18.364M12 2.05v19.9M2.05 12h19.9" />
          </svg>
          No internet connection - working offline
        </div>
      )}

      {/* Modern Header with Theme Toggle */}
      <div className="bg-white border-b border-gray-200 px-4 py-3 shadow-sm select-none" style={{
        background: theme === 'dark' ? '#1E293B' : '#FFFFFF',
        borderColor: theme === 'dark' ? '#334155' : '#E5E7EB',
      }}>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="font-bold text-lg" style={{
              color: theme === 'dark' ? '#F1F5F9' : '#111827',
            }}>
              {settings.siteTitle || 'Cleanup Tracker'}
            </h1>
            <p className="text-sm" style={{
              color: theme === 'dark' ? '#CBD5E1' : '#4B5563',
            }}>
              {user.name} • {
                user.role === 'manager' ? 'Manager' :
                user.role === 'admin' ? 'Admin' :
                user.role === 'salesperson' ? 'Sales' :
                user.role === 'technician' ? 'Technician' :
                'Detailer'
              }
            </p>
          </div>
          <div className="flex items-center gap-2">
            {/* Settings Button */}
            <button
              onClick={() => setShowSettings(true)}
              className="p-2 rounded-lg transition-all"
              style={{
                background: theme === 'dark' ? '#334155' : '#F3F4F6',
                color: theme === 'dark' ? '#F1F5F9' : '#111827',
              }}
              title="Settings"
            >
              ⚙️
            </button>
            <button 
              onClick={onLogout}
              className="px-3 py-2 rounded-lg text-sm font-medium transition-colors border"
              style={{
                background: theme === 'dark' ? '#7F1D1D' : '#FEF2F2',
                color: theme === 'dark' ? '#FEE2E2' : '#B91C1C',
                borderColor: theme === 'dark' ? '#991B1B' : '#FEE2E2',
              }}
            >
              Sign Out
            </button>
          </div>
        </div>
      </div>
      
      {/* Settings Panel */}
      <SettingsPanel
        isOpen={showSettings}
        onClose={() => setShowSettings(false)}
        currentTheme={theme}
        onThemeChange={setTheme}
        userRole={user.role}
      />

      {/* Modern Navigation */}
      <div className="border-b px-6 py-4 shadow-sm" style={{
        background: theme === 'dark' ? '#1E293B' : '#FFFFFF',
        borderColor: theme === 'dark' ? '#334155' : '#E5E7EB',
      }}>
        <div className="flex space-x-2 overflow-x-auto">
          <button 
            onClick={() => setView('dashboard')} 
            className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
              view === 'dashboard' 
                ? 'bg-blue-500 text-white shadow-lg transform scale-105' 
                : 'text-gray-600 hover:text-blue-600 hover:bg-blue-50'
            }`}
          >
            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z" />
            </svg>
            Dashboard
          </button>
          
          {(user.role === 'detailer' || user.role === 'technician') ? (
            <>
              <button 
                onClick={() => setView('jobs')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'jobs' 
                    ? 'bg-green-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-green-600 hover:bg-green-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
                </svg>
                New Job
              </button>
              <button 
                onClick={() => setView('me')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'me' 
                    ? 'bg-purple-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-purple-600 hover:bg-purple-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Me
              </button>
            </>
          ) : user.role === 'salesperson' ? (
            <>
              <button 
                onClick={() => setView('me')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'me' 
                    ? 'bg-purple-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-purple-600 hover:bg-purple-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Me
              </button>
            </>
          ) : (
            <>
              <button 
                onClick={() => setView('jobs')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'jobs' 
                    ? 'bg-green-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-green-600 hover:bg-green-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
                All Jobs
              </button>
              <button 
                onClick={() => setView('users')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'users' 
                    ? 'bg-indigo-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-indigo-600 hover:bg-indigo-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                Team
              </button>
              <button 
                onClick={() => setView('qc')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'qc' 
                    ? 'bg-yellow-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-yellow-600 hover:bg-yellow-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                QC Review
              </button>
              <button 
                onClick={() => setView('reports')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'reports' 
                    ? 'bg-orange-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-orange-600 hover:bg-orange-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                Reports
              </button>
              <button 
                onClick={() => setView('settings')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'settings' 
                    ? 'bg-gray-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-gray-800 hover:bg-gray-100'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                Settings
              </button>
              <button 
                onClick={() => setView('me')} 
                className={`px-6 py-3 text-sm font-semibold rounded-2xl whitespace-nowrap transition-all duration-200 flex items-center gap-2 ${
                  view === 'me' 
                    ? 'bg-purple-500 text-white shadow-lg transform scale-105' 
                    : 'text-gray-600 hover:text-purple-600 hover:bg-purple-50'
                }`}
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                </svg>
                Me
              </button>
            </>
          )}
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 bg-gray-50 overflow-y-auto">
        {/* Detailer Views */}
        {(user.role === 'detailer' || user.role === 'technician') && (
          <>
            {view === 'dashboard' && <DetailerDashboard user={user} jobs={activeJobs} completedJobs={completedJobs} userActiveJob={userActiveJob} onStopWork={handleStopWork} onOpenScanner={() => setShowScanner(true)} onGoToNewJob={() => setView('jobs')} />}
            {view === 'jobs' && <DetailerNewJob user={user} onSearch={handleSearch} searchResults={searchResults} isSearching={isSearching} searchTerm={searchTerm} setSearchTerm={setSearchTerm} showScanner={showScanner} setShowScanner={setShowScanner} onScanSuccess={handleScanSuccess} hasSearched={hasSearched} onJobCreated={async () => { await loadInitialData(); setView('dashboard'); }} />}
            {view === 'me' && <MySettingsView user={user} />}
          </>
        )}        {/* Manager Views */}
    {user.role === 'manager' && (
          <>
            {view === 'dashboard' && <ManagerDashboard jobs={jobs} users={users} currentUser={user} onRefresh={loadInitialData} dashboardStats={dashboardStats} />}
            {view === 'jobs' && <JobsView jobs={jobs} users={users} currentUser={user} onRefresh={loadInitialData} />}
            {view === 'qc' && <QCView jobs={jobs} users={users} currentUser={user} onRefresh={loadInitialData} />}
            {view === 'users' && <UsersView users={users} detailers={detailers} onDeleteUser={deleteUser} />}
            {view === 'reports' && <SimpleReports jobs={jobs} users={users} theme={theme} />}
            {view === 'settings' && <SettingsView settings={settings} onSettingsChange={setSettings} />}
      {view === 'me' && <MySettingsView user={user} />}
          </>
        )}

        {/* Salesperson Views */}
        {user.role === 'salesperson' && (
          <>
            {view === 'dashboard' && <SalespersonDashboard user={user} jobs={jobs} />}
            {view === 'me' && <MySettingsView user={user} />}
          </>
        )}
      </div>
    </div>
  );
}

// Detailer Dashboard Component
function DetailerDashboard({ user, jobs, completedJobs, userActiveJob, onStopWork, onOpenScanner, onGoToNewJob }) {
  const [filterDate, setFilterDate] = useState('');
  const [filterServiceType, setFilterServiceType] = useState('');
  const [showStats, setShowStats] = useState(false);
  const myJobsToday = useMemo(() => {
    if (!completedJobs || !Array.isArray(completedJobs)) return 0;
    return completedJobs.filter(j => {
      const jobDate = j.date || j.completedAt || j.startTime || j.createdAt;
      return DateUtils.isToday(jobDate) && (
        j.assignedTechnicianIds?.includes(user.id) || 
        j.technicianId === user.id ||
        j.technicianId === user.pin
      );
    }).length;
  }, [completedJobs, user.id, user.pin]);

  const [details, setDetails] = useState(null);
  const [elapsed, setElapsed] = useState(0); // seconds
  const [showTimeline, setShowTimeline] = useState(false);

  const completeJob = async (status) => {
    try {
      // Use the same completion logic but with different status
      if (status === 'qc_required') {
        await V2.put(`/jobs/${userActiveJob.id}/status`, { status: 'QC Required' });
      } else {
        await V2.put(`/jobs/${userActiveJob.id}/status`, { status: 'Completed' });
      }
      onStopWork(); // This will refresh the data
    } catch (error) {
      console.error('Failed to complete job:', error);
      alert('Failed to complete job: ' + (error.response?.data?.error || error.message));
    }
  };
  
  // Job details modal state
  const [selectedJob, setSelectedJob] = useState(null);
  const [jobDetails, setJobDetails] = useState(null);

  // Job action handler
  const handleJobAction = async (action) => {
    try {
      const jobId = userActiveJob?.id || userActiveJob?._id;
      if (!jobId) return alert('No active job found');

      switch (action) {
        case 'pause':
          await V2.post(`/jobs/${jobId}/pause`);
          alert('Job paused successfully');
          break;
        case 'addTechnician':
          const techId = prompt('Enter technician ID or scan their badge:');
          if (techId) {
            await V2.post(`/jobs/${jobId}/add-technician`, { technicianId: techId });
            alert('Technician added successfully');
          }
          break;
        case 'message':
          const message = prompt('Enter your message:');
          if (message) {
            await V2.post(`/jobs/${jobId}/message`, { 
              message, 
              fromUserId: user.id, 
              fromUserName: user.name 
            });
            alert('Message sent successfully');
          }
          break;
        default:
          break;
      }
    } catch (err) {
      alert('Action failed: ' + (err.response?.data?.error || err.message));
    }
  };
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Open job details handler
  const openJobDetails = async (job) => {
    setSelectedJob(job);
    setLoading(true);
    setError('');
    setJobDetails(null);
    try {
      const jobId = job.id || job._id;
      if (!jobId) {
        setError('Job ID not found');
        return;
      }
      const res = await V2.get(`/jobs/${jobId}`);
      if (res.data) {
        setJobDetails(res.data);
      } else {
        setError('Job details not found');
      }
    } catch (err) {
      console.error('Job details error:', err);
      setError(err.response?.data?.error || err.message || 'Failed to load job details');
    } finally {
      setLoading(false);
    }
  };

  const closeJobDetails = () => {
    setSelectedJob(null);
    setJobDetails(null);
    setError('');
  };

  // Handle priority change
  const handlePriorityChange = async (newPriority) => {
    if (!jobDetails?.job?.id) return;
    try {
      await V2.patch(`/jobs/${jobDetails.job.id}`, { priority: newPriority });
      setJobDetails(prev => ({
        ...prev,
        job: { ...prev.job, priority: newPriority }
      }));
    } catch (err) {
      console.error('Failed to update priority:', err);
    }
  };

  // Handle sales person change
  const handleSalesPersonChange = async (newSalesPerson) => {
    if (!jobDetails?.job?.id) return;
    try {
      await V2.patch(`/jobs/${jobDetails.job.id}`, { salesPerson: newSalesPerson });
      setJobDetails(prev => ({
        ...prev,
        job: { ...prev.job, salesPerson: newSalesPerson }
      }));
    } catch (err) {
      console.error('Failed to update sales person:', err);
    }
  };

  // Fetch details for active job and run timer
  useEffect(() => {
    let interval;
    const fetchAndStart = async () => {
      if (!userActiveJob) { 
        setDetails(null); 
        setElapsed(0); 
        return; 
      }
      
      try {
        const res = await V2.get(`/jobs/${userActiveJob.id}`);
        setDetails(res.data);
        
        // Get start time from multiple possible sources
        const startTime = userActiveJob.startTime || userActiveJob.startedAt || 
                         res.data?.job?.startTime || res.data?.job?.startedAt ||
                         res.data?.job?.createdAt;
        
        let startTs;
        if (startTime && DateUtils.isValidDate(startTime)) {
          startTs = new Date(startTime).getTime();
        } else {
          // Fallback to events
          const startEvent = (res.data?.events || []).find(e => 
            e.type?.toLowerCase().includes('start') || e.type?.toLowerCase().includes('created')
          ) || (res.data?.events || [])[0];
          
          if (startEvent && DateUtils.isValidDate(startEvent.timestamp)) {
            startTs = new Date(startEvent.timestamp).getTime();
          } else {
            startTs = Date.now(); // Ultimate fallback
          }
        }
        
        const update = () => setElapsed(Math.max(0, Math.floor((Date.now() - startTs) / 1000)));
        update();
        interval = setInterval(update, 1000);
      } catch (err) {
        console.error('Failed to fetch job details:', err);
        // Fallback timer using job start time
        if (userActiveJob.startTime && DateUtils.isValidDate(userActiveJob.startTime)) {
          const startTs = new Date(userActiveJob.startTime).getTime();
          const update = () => setElapsed(Math.max(0, Math.floor((Date.now() - startTs) / 1000)));
          update();
          interval = setInterval(update, 1000);
        }
      }
    };
    fetchAndStart();
    return () => { if (interval) clearInterval(interval); };
  }, [userActiveJob]);

  // Add error handling for the dashboard after all hooks
  if (!user) {
    return <div className="text-gray-900 p-4">Error: No user data found</div>;
  }

  console.log('DetailerDashboard render:', { user, jobs: jobs?.length, completedJobs: completedJobs?.length }); // Debug

  const fmt = (s) => {
    const h = Math.floor(s / 3600).toString().padStart(2,'0');
    const m = Math.floor((s % 3600) / 60).toString().padStart(2,'0');
    const sec = (s % 60).toString().padStart(2,'0');
    return `${h}:${m}:${sec}`;
  };

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Current Job Status */}
        {userActiveJob ? (
          <div className="bg-white rounded-3xl p-8 shadow-2xl border border-gray-100 transform hover:scale-[1.02] transition-all duration-300">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 bg-gradient-to-r from-amber-400 to-orange-500 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-900">Current Job</h3>
            </div>
            
            <div className="grid md:grid-cols-3 gap-6 mb-8">
              <div className="md:col-span-2">
                <h4 className="text-3xl font-bold text-gray-900 mb-3">{userActiveJob.vehicleDescription}</h4>
                <div className="grid grid-cols-2 gap-4 mb-4">
                  <div className="bg-blue-50 rounded-2xl p-4">
                    <p className="text-blue-600 font-semibold text-sm mb-1">Service Type</p>
                    <p className="text-blue-900 font-bold text-lg">{userActiveJob.serviceType}</p>
                  </div>
                  <div className="bg-purple-50 rounded-2xl p-4">
                    <p className="text-purple-600 font-semibold text-sm mb-1">Stock Number</p>
                    <p className="text-purple-900 font-bold text-lg">{userActiveJob.stockNumber}</p>
                  </div>
                </div>
                {details && (
                  <div className="bg-gray-50 rounded-2xl p-4">
                    <p className="text-gray-600 font-medium text-sm mb-2">
                      Started: {DateUtils.formatDate(
                        (details.job?.startedAt) || (details.events?.[0]?.timestamp) || Date.now(),
                        { hour: '2-digit', minute: '2-digit', second: '2-digit' }
                      )}
                    </p>
                  </div>
                )}
              </div>
              
              <div className="flex flex-col items-center justify-center bg-gradient-to-br from-amber-50 to-orange-50 rounded-3xl p-6">
                {details && (
                  <>
                    <p className="text-amber-600 font-semibold text-sm mb-2">Time Working</p>
                    <p className="text-4xl font-bold text-amber-900 font-mono mb-2">{fmt(elapsed)}</p>
                    <div className="w-full bg-amber-200 rounded-full h-2">
                      <div className="bg-gradient-to-r from-amber-400 to-orange-500 h-2 rounded-full animate-pulse" style={{width: '60%'}}></div>
                    </div>
                  </>
                )}
              </div>
            </div>
            
            <div className="flex gap-3 mb-4">
              <button 
                onClick={() => handleJobAction('pause')}
                className="flex-1 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white font-bold py-3 px-4 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-sm"
              >
                ⏸️ Pause
              </button>
              <button 
                onClick={() => handleJobAction('addTechnician')}
                className="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-3 px-4 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-sm"
              >
                👥 Add Helper
              </button>
              <button 
                onClick={() => handleJobAction('message')}
                className="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-3 px-4 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] text-sm"
              >
                💬 Message
              </button>
            </div>
            
            <div className="flex flex-col gap-4">
              <div className="flex gap-4">
                <button 
                  onClick={() => completeJob('completed')}
                  className="flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-4 px-6 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02]"
                >
                  ✅ Complete - Ready for Delivery
                </button>
                <button 
                  onClick={() => completeJob('qc_required')}
                  className="flex-1 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white font-bold py-4 px-6 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02]"
                >
                  🔍 Complete - Needs QC Review
                </button>
              </div>
              {details && (
                <button 
                  onClick={() => setShowTimeline(!showTimeline)} 
                  className="px-6 py-4 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-2xl transition-all duration-200 shadow-md hover:shadow-lg"
                >
                  {showTimeline ? 'Hide' : 'Show'} Timeline
                </button>
              )}
            </div>
            
            {showTimeline && details && (
              <div className="mt-6 bg-gray-50 rounded-2xl p-6 border border-gray-100">
                <h5 className="font-bold text-gray-900 mb-4">Job Timeline</h5>
                <ul className="space-y-3 max-h-40 overflow-auto">
                  {(details.events || []).map((ev, idx) => (
                    <li key={idx} className="flex items-center gap-3 p-3 bg-white rounded-xl shadow-sm">
                      <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <div>
                        <span className="font-semibold text-gray-900">{ev.type}</span>
                        <p className="text-gray-600 text-sm">{DateUtils.formatDate(ev.timestamp)} {ev.userName ? `• ${ev.userName}` : ''}</p>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        ) : (
          <div className="bg-white rounded-3xl p-8 shadow-2xl border border-gray-100">
            <div className="flex items-center gap-3 mb-6">
              <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-900">Start a New Job</h3>
            </div>
            
            <p className="text-gray-600 mb-6 text-lg">Scan a VIN or search by VIN/Stock to begin working.</p>
            
            <div className="mb-6">
              <button
                onClick={async () => { try { await V2.post('/vehicles/refresh'); alert('Inventory refreshed. Try your search again.'); } catch (e) { alert('Refresh failed: ' + (e.response?.data?.error || e.message)); } }}
                className="px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl transition-all duration-200 shadow-md hover:shadow-lg text-sm"
              >
                Refresh Inventory
              </button>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <button 
                onClick={onOpenScanner}
                className="group bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-bold py-6 px-6 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] flex items-center justify-center gap-3"
              >
                <svg className="w-6 h-6 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
                Scan VIN
              </button>
              <button 
                onClick={onGoToNewJob}
                className="group bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold py-6 px-6 rounded-2xl transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-[1.02] flex items-center justify-center gap-3"
              >
                <svg className="w-6 h-6 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                Search Vehicle
              </button>
            </div>
          </div>
        )}

        {/* Today's Stats */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-white rounded-3xl p-8 shadow-2xl border border-gray-100 transform hover:scale-[1.02] transition-all duration-300">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-14 h-14 bg-gradient-to-r from-green-400 to-emerald-500 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div>
                <h4 className="text-gray-600 text-sm font-semibold uppercase tracking-wider">Completed Today</h4>
                <p className="text-4xl font-bold text-gray-900">{myJobsToday}</p>
              </div>
            </div>
            <div className="bg-green-50 rounded-2xl p-4">
              <p className="text-green-700 font-semibold text-sm">Great work! Keep it up!</p>
              <div className="mt-2 w-full bg-green-200 rounded-full h-2">
                <div className="bg-gradient-to-r from-green-400 to-emerald-500 h-2 rounded-full" style={{width: Math.min(100, (myJobsToday / 8) * 100) + '%'}}></div>
              </div>
            </div>
          </div>
          
          <div className="bg-white rounded-3xl p-8 shadow-2xl border border-gray-100 transform hover:scale-[1.02] transition-all duration-300">
            <div className="flex items-center gap-4 mb-4">
              <div className={`w-14 h-14 rounded-2xl flex items-center justify-center shadow-lg ${
                userActiveJob 
                  ? 'bg-gradient-to-r from-amber-400 to-orange-500' 
                  : 'bg-gradient-to-r from-blue-400 to-purple-500'
              }`}>
                <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  {userActiveJob ? (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  ) : (
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
                  )}
                </svg>
              </div>
              <div>
                <h4 className="text-gray-600 text-sm font-semibold uppercase tracking-wider">Active Job</h4>
                <p className="text-4xl font-bold text-gray-900">{userActiveJob ? 1 : 0}</p>
              </div>
            </div>
            <div className={`rounded-2xl p-4 ${
              userActiveJob 
                ? 'bg-amber-50' 
                : 'bg-blue-50'
            }`}>
              <p className={`font-semibold text-sm ${
                userActiveJob 
                  ? 'text-amber-700' 
                  : 'text-blue-700'
              }`}>
                {userActiveJob ? 'Keep going! You\'re doing great!' : 'Ready to start your next job'}
              </p>
              <div className="mt-2 w-full bg-gray-200 rounded-full h-2">
                <div className={`h-2 rounded-full ${
                  userActiveJob 
                    ? 'bg-gradient-to-r from-amber-400 to-orange-500 animate-pulse' 
                    : 'bg-gradient-to-r from-blue-400 to-purple-500'
                }`} style={{width: userActiveJob ? '100%' : '0%'}}></div>
              </div>
            </div>
          </div>
        </div>

        {/* My Job History */}
        <div className="bg-white rounded-3xl p-8 shadow-2xl border border-gray-100">
          <div className="flex items-center justify-between mb-6">
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              <h3 className="text-2xl font-bold text-gray-900">My Job History & Analytics</h3>
            </div>
            <button
              onClick={() => setShowStats(!showStats)}
              className="px-4 py-2 bg-indigo-100 hover:bg-indigo-200 text-indigo-700 rounded-lg font-medium transition-colors"
            >
              {showStats ? 'Hide Stats' : 'Show Stats'}
            </button>
          </div>

          {/* Stats Panel */}
          {showStats && (
            <div className="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4">
                <h4 className="text-blue-700 font-semibold mb-1">Total Completed</h4>
                <p className="text-2xl font-bold text-blue-900">
                  {completedJobs.filter(job => 
                    job.technicianId === user.id || 
                    job.technicianName === user.name || 
                    (job.assignedTechnicianIds && job.assignedTechnicianIds.includes(user.id))
                  ).length}
                </p>
              </div>
              <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4">
                <h4 className="text-green-700 font-semibold mb-1">Avg Time/Job</h4>
                <p className="text-2xl font-bold text-green-900">
                  {(() => {
                    const myJobs = completedJobs.filter(job => 
                      (job.technicianId === user.id || job.technicianName === user.name) && 
                      job.duration
                    );
                    if (myJobs.length === 0) return 'N/A';
                    const avgMs = myJobs.reduce((sum, job) => sum + job.duration, 0) / myJobs.length;
                    const hours = Math.floor(avgMs / (1000 * 60 * 60));
                    const minutes = Math.floor((avgMs % (1000 * 60 * 60)) / (1000 * 60));
                    return `${hours}h ${minutes}m`;
                  })()}
                </p>
              </div>
              <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4">
                <h4 className="text-purple-700 font-semibold mb-1">This Week</h4>
                <p className="text-2xl font-bold text-purple-900">
                  {completedJobs.filter(job => {
                    if (!job.completedAt) return false;
                    const jobDate = new Date(job.completedAt);
                    const weekAgo = new Date();
                    weekAgo.setDate(weekAgo.getDate() - 7);
                    return jobDate > weekAgo && (job.technicianId === user.id || job.technicianName === user.name);
                  }).length}
                </p>
              </div>
            </div>
          )}

          {/* Filters - Compact */}
          <div className="mb-4 flex flex-wrap gap-3 items-end">
            <div className="w-40">
              <label className="block text-xs font-medium text-gray-600 mb-1">Date</label>
              <input
                type="date"
                value={filterDate}
                onChange={(e) => setFilterDate(e.target.value)}
                className="w-full bg-white border border-gray-300 rounded-lg py-1.5 px-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div className="w-44">
              <label className="block text-xs font-medium text-gray-600 mb-1">Service Type</label>
              <select
                value={filterServiceType}
                onChange={(e) => setFilterServiceType(e.target.value)}
                className="w-full bg-white border border-gray-300 rounded-lg py-1.5 px-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">All Services</option>
                <option value="Detail">Detail</option>
                <option value="Delivery">Delivery</option>
                <option value="Rewash">Rewash</option>
                <option value="Lot Car">Lot Car</option>
                <option value="FCTP">FCTP</option>
                <option value="Cleanup">Cleanup</option>
                <option value="Showroom">Showroom</option>
              </select>
            </div>
            {(filterDate || filterServiceType) && (
              <button
                onClick={() => {
                  setFilterDate('');
                  setFilterServiceType('');
                }}
                className="px-3 py-1.5 bg-gray-200 hover:bg-gray-300 text-gray-700 rounded-lg text-sm font-medium transition-colors"
              >
                Clear
              </button>
            )}
          </div>
          
          <div className="space-y-4 max-h-96 overflow-y-auto">
            {completedJobs
              .filter(job => {
                // Filter by technician
                const isMyJob = job.technicianId === user.id || 
                               job.technicianName === user.name || 
                               (job.assignedTechnicianIds && job.assignedTechnicianIds.includes(user.id));
                if (!isMyJob) return false;
                
                // Filter by date
                if (filterDate) {
                  const jobDate = job.completedAt ? new Date(job.completedAt).toISOString().split('T')[0] : 
                                 job.date ? job.date : null;
                  if (jobDate !== filterDate) return false;
                }
                
                // Filter by service type
                if (filterServiceType && job.serviceType !== filterServiceType) return false;
                
                return true;
              })
              .slice(0, 10)
              .map(job => (
                <button
                  key={job.id}
                  onClick={() => openJobDetails(job)}
                  className="w-full text-left bg-gray-50 hover:bg-gray-100 rounded-2xl p-6 border border-gray-100 hover:shadow-lg transition-all duration-200 transform hover:scale-[1.01]"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-3">
                        <h4 className="text-gray-900 font-bold text-xl">{job.vehicleDescription}</h4>
                        {job.color && (
                          <span className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full font-semibold">
                            {job.color}
                          </span>
                        )}
                      </div>
                      <div className="grid grid-cols-2 gap-4 text-sm mb-3">
                        <div className="bg-white rounded-xl p-3">
                          <p className="text-gray-500 font-medium mb-1">Stock Number</p>
                          <p className="text-gray-900 font-bold">{job.stockNumber}</p>
                        </div>
                        <div className="bg-white rounded-xl p-3">
                          <p className="text-gray-500 font-medium mb-1">VIN</p>
                          <p className="font-mono text-gray-900 font-bold text-sm">{job.vin?.slice(-6) || 'N/A'}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4 text-sm mb-3">
                        <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full font-semibold">{job.serviceType}</span>
                        {job.priority && job.priority !== 'Normal' && (
                          <span className={`px-3 py-1 rounded-full text-sm font-semibold ${
                            job.priority === 'Urgent' ? 'bg-red-100 text-red-700' :
                            job.priority === 'High' ? 'bg-orange-100 text-orange-700' :
                            'bg-gray-100 text-gray-700'
                          }`}>
                            {job.priority}
                          </span>
                        )}
                      </div>
                      {job.salesPerson && (
                        <p className="text-purple-700 font-semibold text-sm mb-2">Sales: {job.salesPerson}</p>
                      )}
                      <div className="text-sm text-gray-600">
                        {job.startTime && (
                          <p>Started: {DateUtils.formatDateTime(job.startTime)}</p>
                        )}
                        {job.completedAt && (
                          <p>Completed: {DateUtils.formatDateTime(job.completedAt)}</p>
                        )}
                      </div>
                    </div>
                    <div className="text-right ml-6 flex flex-col items-end">
                      <span className={`px-4 py-2 rounded-2xl text-sm font-bold mb-3 ${
                        job.status === 'In Progress' 
                          ? 'bg-yellow-100 text-yellow-800' 
                          : 'bg-green-100 text-green-800'
                      }`}>
                        {job.status}
                      </span>
                      {job.completedAt && (job.startTime || job.startedAt) && (
                        <div className="bg-green-50 rounded-2xl p-4 text-center">
                          <p className="text-green-700 font-bold text-2xl">
                            {DateUtils.formatDuration(
                              DateUtils.calculateDuration(
                                job.startTime || job.startedAt, 
                                job.completedAt
                              )
                            )}
                          </p>
                          <p className="text-green-600 text-sm font-semibold">Total Time</p>
                        </div>
                      )}
                    </div>
                  </div>
                </button>
              ))}
            {completedJobs.filter(job => 
              job.assignedTechnicianIds?.includes(user.id) || 
              job.technicianId === user.id ||
              job.technicianId === user.pin
            ).length === 0 && (
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <p className="text-gray-900 font-semibold">No jobs completed yet</p>
                <p className="text-gray-600 text-sm mt-1">Your completed jobs will appear here</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Job Details Modal */}
        {selectedJob && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-3xl p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto shadow-2xl border border-gray-100">
              <div className="flex justify-between items-start mb-6">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center">
                    <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h4 className="text-gray-900 font-bold text-2xl">Job Details</h4>
                </div>
                <button 
                  onClick={closeJobDetails} 
                  className="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-2xl flex items-center justify-center transition-colors duration-200"
                >
                  <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              {loading && (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="animate-spin w-8 h-8 text-blue-600" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </div>
                  <p className="text-gray-600 font-semibold">Loading job details…</p>
                </div>
              )}
              {error && (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
                    </svg>
                  </div>
                  <p className="text-red-600 font-semibold">{error}</p>
                </div>
              )}
            
            {jobDetails && (
              <div className="space-y-4">
                {/* Compact Vehicle & Job Information */}
                <div className="bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-4 border border-blue-200">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="md:col-span-2">
                      <h5 className="text-blue-900 font-semibold mb-2 flex items-center gap-2">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /></svg>
                        Vehicle Details
                      </h5>
                      <p className="text-gray-900 font-bold text-lg mb-2">{selectedJob.vehicleDescription}</p>
                      <div className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm">
                        <div className="flex items-center gap-1"><span className="text-gray-600">VIN:</span><span className="font-mono text-gray-900 text-xs">{jobDetails.job?.vin}</span></div>
                        <div className="flex items-center gap-1"><span className="text-gray-600">Stock:</span><span className="text-gray-900 font-medium">{jobDetails.job?.stockNumber}</span></div>
                        {jobDetails.job?.color && <div className="flex items-center gap-1"><span className="text-gray-600">Color:</span><span className="text-gray-900 font-medium">{jobDetails.job.color}</span></div>}
                        <div className="flex items-center gap-1"><span className="text-gray-600">Service:</span><span className="text-blue-700 font-bold">{jobDetails.job?.serviceType}</span></div>
                        <div className="flex items-center gap-1">
                          <span className="text-gray-600">Priority:</span>
                          <select 
                            value={jobDetails.job?.priority || 'Normal'} 
                            onChange={(e) => handlePriorityChange(e.target.value)}
                            className="bg-white text-gray-900 border border-gray-300 rounded px-1.5 py-0.5 text-xs font-medium"
                          >
                            <option value="Low">Low</option>
                            <option value="Normal">Normal</option>
                            <option value="High">High</option>
                            <option value="Urgent">Urgent</option>
                          </select>
                        </div>
                        <div className="flex items-center gap-1">
                          <span className="text-gray-600">Salesperson:</span>
                          <input 
                            type="text"
                            value={jobDetails.job?.salesPerson || ''}
                            onChange={(e) => handleSalesPersonChange(e.target.value)}
                            placeholder="Name"
                            className="bg-white text-gray-900 border border-gray-300 rounded px-1.5 py-0.5 text-xs flex-1"
                          />
                        </div>
                      </div>
                    </div>
                    <div className="bg-white rounded-lg p-3 border border-blue-200">
                      <h5 className="text-gray-900 font-semibold mb-2 text-sm flex items-center gap-1">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                        Timing
                      </h5>
                      <div className={`text-sm font-bold mb-2 ${
                        jobDetails.job?.status === 'In Progress' ? 'text-yellow-700' : 'text-green-700'
                      }`}>
                        {jobDetails.job?.status}
                      </div>
                      {jobDetails.job?.startTime && (
                        <div className="space-y-1 text-xs">
                          <p className="text-gray-600">Started: <span className="text-gray-900 font-medium">{new Date(jobDetails.job.startTime).toLocaleTimeString()}</span></p>
                          {jobDetails.job?.status === 'In Progress' && (
                            <div>
                              <p className="text-gray-600 mb-1">Duration:</p>
                              <LiveTimer startTime={jobDetails.job.startTime} className="text-yellow-700 font-mono text-xl font-bold" />
                            </div>
                          )}
                          {jobDetails.job?.completedAt && (
                            <div>
                              <p className="text-gray-600">Completed: <span className="text-gray-900 font-medium">{new Date(jobDetails.job.completedAt).toLocaleTimeString()}</span></p>
                              <p className="text-green-700 text-base font-bold mt-1">
                                {DateUtils.formatDuration(
                                  DateUtils.calculateDuration(jobDetails.job.startTime, jobDetails.job.completedAt)
                                )}
                              </p>
                            </div>
                          )}
                          {jobDetails.job?.technicianName && (
                            <p className="text-gray-600 pt-1 border-t border-gray-200">Tech: <span className="text-gray-900 font-medium">{jobDetails.job.technicianName}</span></p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Compact Activity Timeline */}
                <div className="bg-white rounded-lg p-3 border border-gray-200">
                  <h5 className="text-gray-900 font-semibold mb-2 text-sm flex items-center gap-1">
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" /></svg>
                    Activity Timeline
                  </h5>
                  <ul className="space-y-2 max-h-36 overflow-auto pr-1">
                    {jobDetails.job?.startTime && (
                      <li className="text-xs border-l-2 border-green-500 pl-2 py-1">
                        <span className="text-green-700 font-semibold">Started</span>
                        <span className="text-gray-500 block text-[11px]">
                          {DateUtils.formatDateTime(jobDetails.job.startTime)}
                          {jobDetails.job?.technicianName && ` • ${jobDetails.job.technicianName}`}
                        </span>
                      </li>
                    )}
                    {jobDetails.job?.completedAt && (
                      <li className="text-xs border-l-2 border-blue-500 pl-2 py-1">
                        <span className="text-blue-700 font-semibold">Completed</span>
                        <span className="text-gray-500 block text-[11px]">
                          {DateUtils.formatDateTime(jobDetails.job.completedAt)}
                          {jobDetails.job?.duration && ` • ${DateUtils.formatDuration(jobDetails.job.duration)}`}
                        </span>
                      </li>
                    )}
                    {(jobDetails.events || []).map((ev, idx) => {
                      const validDate = DateUtils.getValidDate(ev.timestamp || ev.at);
                      return (
                        <li key={idx} className="text-xs border-l-2 border-gray-400 pl-2 py-1">
                          <span className="text-gray-900 font-semibold">
                            {ev.type?.replace('_', ' ')?.replace(/\b\w/g, l => l.toUpperCase()) || 'Event'}
                          </span>
                          <span className="text-gray-500 block text-[11px]">
                            {validDate ? DateUtils.formatDateTime(validDate) : 'Invalid Date'}
                            {ev.userName && ` • ${ev.userName}`}
                          </span>
                        </li>
                      );
                    })}
                    {(!jobDetails.job?.startTime && (!jobDetails.events || jobDetails.events.length === 0)) && (
                      <li className="text-gray-500 text-xs italic">No activity recorded</li>
                    )}
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

// Detailer New Job Component
function DetailerNewJob({ user, onSearch, searchResults, isSearching, searchTerm, setSearchTerm, showScanner, setShowScanner, onScanSuccess, hasSearched, onJobCreated }) {
  const toast = useToast();
  const [selectedVehicle, setSelectedVehicle] = useState(null);
  const [serviceType, setServiceType] = useState('Detail');
  const [salesPerson, setSalesPerson] = useState('');
  const [salespersons, setSalespersons] = useState([]);

  const serviceTypes = ['Detail', 'Delivery', 'Rewash', 'Lot Car', 'FCTP', 'Cleanup', 'Showroom'];

  // Fetch salespersons
  useEffect(() => {
    const fetchSalespersons = async () => {
      try {
        const response = await V2.get('/users');
        const salespeople = response.data.filter(user => user.role === 'salesperson');
        setSalespersons(salespeople);
      } catch (error) {
        console.error('Failed to fetch salespersons:', error);
      }
    };
    fetchSalespersons();
  }, []);

  const handleSearchSubmit = (e) => {
    e.preventDefault();
    onSearch(searchTerm);
  };

  // Auto-select when exactly one result
  useEffect(() => {
    if (searchResults && searchResults.length === 1) {
      setSelectedVehicle(searchResults[0]);
    }
  }, [searchResults]);

  const handleCreateJob = async () => {
    // Enhanced validation
    if (!selectedVehicle) {
      toast.error('Please select a vehicle first');
      return;
    }
    
    if (!serviceType || serviceType.trim() === '') {
      toast.error('Please select a service type');
      return;
    }

    if (!selectedVehicle.vin || selectedVehicle.vin.length < 10) {
      toast.error('Invalid VIN number');
      return;
    }
    
    try {
      toast.info('Creating job...');
      const now = new Date();
      const newJob = {
        technicianId: user.id,
        technicianName: user.name,
        vin: selectedVehicle.vin,
        stockNumber: selectedVehicle.stockNumber,
        vehicleDescription: `${selectedVehicle.year} ${selectedVehicle.make} ${selectedVehicle.model}`,
        serviceType: serviceType,
        salesPerson: salesPerson.trim() || '',
        assignedTechnicianIds: [user.id],
        status: 'In Progress',
        date: DateUtils.getLocalDateString(now),
        startTime: now.toISOString(),
        startedAt: now.toISOString(),
        createdAt: now.toISOString(),
        timestamp: now.toISOString(),
        // Vehicle details
        year: selectedVehicle.year || '',
        make: selectedVehicle.make || '',
        model: selectedVehicle.model || '',
        vehicleColor: selectedVehicle.color || '',
        priority: 'Normal'
      };
      
      await V2.post('/jobs', newJob);
      toast.success('Job started successfully! 🚗');
      setSelectedVehicle(null);
      setSearchTerm('');
      setSalesPerson('');
      
      // Refresh job data and navigate to dashboard
      if (onJobCreated) {
        await onJobCreated();
      }
    } catch (err) {
      toast.error('Failed to start job: ' + (err.response?.data?.error || err.message));
    }
  };

  return (
    <div className="space-y-6">
      {/* Scan Option */}
      <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Scan VIN Barcode</h3>
        <button 
          onClick={() => setShowScanner(true)}
          className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
        >
          <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
          <span>Scan VIN</span>
        </button>
      </div>

      {/* Search Option */}
      <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Search Vehicle</h3>
        <form onSubmit={handleSearchSubmit} className="space-y-4">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            placeholder="Enter VIN or Stock Number"
            className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <div className="flex items-center gap-2">
            <button 
              type="submit"
              disabled={isSearching || !searchTerm.trim()}
              className="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-lg transition-colors disabled:bg-gray-500"
            >
              {isSearching ? (
                <span className="flex items-center">
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Searching...
                </span>
              ) : 'Search'}
            </button>
            {searchTerm && (
              <button
                type="button"
                onClick={() => { setSearchTerm(''); }}
                className="px-4 py-3 rounded-lg border border-gray-300 text-gray-700 bg-gray-50 hover:bg-gray-100"
              >
                Clear
              </button>
            )}
          </div>
        </form>

        {/* Search Results */}
        {hasSearched && searchResults.length === 0 && !isSearching && (
          <p className="mt-4 text-gray-600">No vehicles found. Check VIN/Stock and try again.</p>
        )}
        {searchResults.length > 0 && (
          <div className="mt-4 space-y-2">
            <h4 className="text-gray-900 font-medium">Search Results</h4>
            {searchResults.map((vehicle, index) => (
              <div 
                key={index}
                className={`p-3 rounded-lg cursor-pointer transition-colors ${
                  selectedVehicle?.vin === vehicle.vin 
                    ? 'bg-blue-100 border border-blue-300' 
                    : 'bg-gray-50 hover:bg-gray-100 border border-gray-200'
                }`}
                onClick={() => setSelectedVehicle(vehicle)}
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <p className="text-gray-900 font-semibold text-lg">{vehicle.year} {vehicle.make} {vehicle.model}</p>
                    <div className="flex items-center gap-2 mt-1">
                      <p className="text-gray-600 text-sm">VIN: <span className="font-mono">{vehicle.vin}</span></p>
                      <p className="text-gray-600 text-sm">Stock: {vehicle.stockNumber}</p>
                    </div>
                  </div>
                  {vehicle.color && (
                    <span className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full font-medium">
                      {vehicle.color}
                    </span>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Selected Vehicle & Job Creation */}
        {selectedVehicle && (
          <div className="mt-6 bg-blue-50 rounded-lg p-4 border border-blue-200">
            <h4 className="text-blue-800 font-semibold mb-3">Selected Vehicle</h4>
            <div className="flex justify-between items-start mb-3">
              <div>
                <p className="text-gray-900 text-lg font-bold">{selectedVehicle.year} {selectedVehicle.make} {selectedVehicle.model}</p>
                <div className="flex items-center gap-4 mt-1">
                  <p className="text-blue-700 text-sm">Stock: {selectedVehicle.stockNumber}</p>
                  <p className="text-blue-700 text-sm">VIN: <span className="font-mono">{selectedVehicle.vin}</span></p>
                </div>
              </div>
              {selectedVehicle.color && (
                <span className="px-3 py-1 bg-blue-200 text-blue-900 text-sm rounded-full font-semibold">
                  {selectedVehicle.color}
                </span>
              )}
            </div>
            
            <div className="mt-4">
              <label className="block text-blue-800 font-medium mb-2">Service Type</label>
              <select 
                value={serviceType}
                onChange={(e) => setServiceType(e.target.value)}
                className="w-full bg-gray-50 text-gray-900 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                {serviceTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
            </div>
            
            <div className="mt-4">
              <label className="block text-blue-800 font-medium mb-2">Sales Person (Optional)</label>
              <select
                value={salesPerson}
                onChange={(e) => setSalesPerson(e.target.value)}
                className="w-full bg-gray-50 text-gray-900 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select Sales Person...</option>
                {salespersons.map((person) => (
                  <option key={person.id || person._id} value={person.name}>
                    {person.name}
                  </option>
                ))}
              </select>
              {salesPerson && (
                <div className="mt-2 flex items-center gap-2">
                  <span className="text-blue-700 text-sm">Selected: {salesPerson}</span>
                  {salespersons.find(p => p.name === salesPerson)?.phone && (
                    <button
                      type="button"
                      onClick={() => {
                        const phone = salespersons.find(p => p.name === salesPerson)?.phone;
                        const message = `New job assigned: ${selectedVehicle.year} ${selectedVehicle.make} ${selectedVehicle.model} - ${serviceType}`;
                        window.open(`sms:${phone}?body=${encodeURIComponent(message)}`, '_blank');
                      }}
                      className="text-blue-600 hover:text-blue-800 text-sm underline"
                    >
                      Notify
                    </button>
                  )}
                </div>
              )}
            </div>
            
            <button 
              onClick={handleCreateJob}
              className="w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition-colors"
            >
              Start Job
            </button>
          </div>
        )}
      </div>

      {/* Scanner Modal */}
      {showScanner && (
        <div className="fixed inset-0 bg-black/75 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl p-6 w-full max-w-md border border-gray-200 shadow-lg">
            <h3 className="text-gray-900 font-semibold text-lg mb-4">Scan VIN Barcode</h3>
            <VinScanner onSuccess={onScanSuccess} onClose={() => setShowScanner(false)} />
            <button 
              onClick={() => setShowScanner(false)}
              className="w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white font-bold py-3 px-4 rounded-lg transition-colors"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

// Salesperson Dashboard Component
function SalespersonDashboard({ user, jobs }) {
  const [myJobs, setMyJobs] = useState([]);

  // Filter jobs assigned to this salesperson
  useEffect(() => {
    if (jobs) {
      const filtered = jobs.filter(job => 
        job.salesPerson === user.name || 
        job.salesPerson === user.employeeId ||
        job.salesPerson === user.id
      );
      setMyJobs(filtered);
    }
  }, [jobs, user]);

  const handleQualityCheck = async (jobId, passed) => {
    try {
      await V2.post(`/jobs/${jobId}/qc`, {
        qcCheckerId: user.employeeId || user.id,
        qcCheckerName: user.name,
        qcPassed: passed,
        qcNotes: passed ? 'Quality check passed' : 'Quality check failed - needs attention'
      });
      alert('Quality check recorded successfully');
    } catch (err) {
      alert('QC update failed: ' + (err.response?.data?.error || err.message));
    }
  };

  const handleMessage = async (jobId, recipientType) => {
    const message = prompt('Enter your message:');
    if (!message) return;

    try {
      await V2.post(`/jobs/${jobId}/message`, {
        message,
        fromUserId: user.id,
        fromUserName: user.name,
        recipientType // 'detailer' or 'sales'
      });
      alert('Message sent successfully');
    } catch (err) {
      alert('Message failed: ' + (err.response?.data?.error || err.message));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-3xl p-8 shadow-xl mb-8 border border-gray-100">
          <div className="flex items-center gap-4 mb-4">
            <div className="w-16 h-16 bg-gradient-to-r from-green-500 to-blue-600 rounded-3xl flex items-center justify-center shadow-lg">
              <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Sales Dashboard</h1>
              <p className="text-gray-600 text-lg">Welcome back, {user.name}</p>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-2xl p-6 border border-blue-200">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-blue-500 rounded-2xl flex items-center justify-center">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <div>
                  <p className="text-blue-700 font-semibold text-sm">My Jobs</p>
                  <p className="text-2xl font-bold text-blue-900">{myJobs.length}</p>
                </div>
              </div>
            </div>
            
            <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-2xl p-6 border border-green-200">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-green-500 rounded-2xl flex items-center justify-center">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <div>
                  <p className="text-green-700 font-semibold text-sm">Completed</p>
                  <p className="text-2xl font-bold text-green-900">
                    {myJobs.filter(j => j.status === 'Completed').length}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="bg-gradient-to-r from-orange-50 to-orange-100 rounded-2xl p-6 border border-orange-200">
              <div className="flex items-center gap-3">
                <div className="w-12 h-12 bg-orange-500 rounded-2xl flex items-center justify-center">
                  <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div>
                  <p className="text-orange-700 font-semibold text-sm">In Progress</p>
                  <p className="text-2xl font-bold text-orange-900">
                    {myJobs.filter(j => j.status === 'In Progress').length}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Jobs List */}
        <div className="bg-white rounded-3xl p-8 shadow-xl border border-gray-100">
          <h3 className="text-2xl font-bold text-gray-900 mb-6">My Vehicle Jobs</h3>
          
          <div className="space-y-4">
            {myJobs.map(job => (
              <div key={job.id} className="job-card bg-gray-50 rounded-2xl p-4 md:p-3 border border-gray-200 hover:shadow-lg transition-all duration-200 cursor-pointer hover:border-gray-300">
                <div className="flex justify-between items-start gap-3">
                  <div className="flex-1">
                    <h4 className="text-base md:text-lg font-bold text-gray-900 mb-2 leading-tight">
                      {job.year} {job.make} {job.model} {job.vehicleColor && `• ${job.vehicleColor}`}
                    </h4>
                    <div className="job-info-grid grid grid-cols-2 md:grid-cols-4 gap-2 md:gap-3 text-xs md:text-sm mb-3">
                      <div>
                        <p className="text-gray-600 font-medium text-xs">VIN</p>
                        <p className="text-gray-900 font-semibold font-mono text-xs">{job.vin?.slice(-6)}</p>
                      </div>
                      <div>
                        <p className="text-gray-600 font-medium text-xs">Stock</p>
                        <p className="text-gray-900 font-semibold">{job.stockNumber}</p>
                      </div>
                      <div>
                        <p className="text-gray-600 font-medium text-xs">Service</p>
                        <p className="text-blue-700 font-semibold">{job.serviceType}</p>
                      </div>
                      <div>
                        <p className="text-gray-600 font-medium text-xs">Technician</p>
                        <p className="text-gray-900 font-semibold">{job.technicianName}</p>
                      </div>
                    </div>
                    
                    <div className="flex items-center gap-2 flex-wrap">
                      <span className={`status-badge px-2 md:px-3 py-1 rounded-full text-xs font-bold border ${
                        job.status === 'Completed' ? 'status-completed' :
                        job.status === 'In Progress' ? 'status-in-progress' :
                        job.status === 'QC Required' ? 'status-qc-required' :
                        job.status === 'Failed QC' ? 'status-failed-qc' :
                        'status-pending'
                      }`}>
                        {job.status}
                      </span>
                      
                      {job.priority && job.priority !== 'Normal' && (
                        <span className={`px-2 md:px-3 py-1 rounded-full text-xs font-bold border ${
                          job.priority === 'Urgent' ? 'priority-urgent' :
                          job.priority === 'High' ? 'priority-high' :
                          job.priority === 'Low' ? 'priority-low' :
                          'priority-normal'
                        }`}>
                          {job.priority}
                        </span>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex flex-col gap-1.5 ml-2">
                    {job.status === 'Completed' && !job.qcCompleted && (
                      <div className="flex gap-1.5">
                        <button
                          onClick={(e) => { e.stopPropagation(); handleQualityCheck(job.id, true); }}
                          className="px-3 py-1.5 bg-green-600 hover:bg-green-700 text-white text-xs font-bold rounded-lg transition-colors shadow-sm"
                        >
                          ✓ Pass
                        </button>
                        <button
                          onClick={(e) => { e.stopPropagation(); handleQualityCheck(job.id, false); }}
                          className="px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white text-xs font-bold rounded-lg transition-colors shadow-sm"
                        >
                          ✗ Fail
                        </button>
                      </div>
                    )}
                    
                    <button
                      onClick={(e) => { e.stopPropagation(); handleMessage(job.id, 'detailer'); }}
                      className="px-3 py-1.5 bg-blue-600 hover:bg-blue-700 text-white text-xs font-bold rounded-lg transition-colors flex items-center gap-1.5 shadow-sm whitespace-nowrap"
                    >
                      💬 Message
                    </button>
                  </div>
                </div>
              </div>
            ))}
            
            {myJobs.length === 0 && (
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <p className="text-gray-500 font-semibold">No jobs assigned yet</p>
                <p className="text-gray-400 text-sm mt-1">Jobs assigned to you will appear here</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

// Manager Dashboard Component with Auto-refresh  
function ManagerDashboard({ jobs, users, currentUser, onRefresh, dashboardStats }) {
  const [selectedJob, setSelectedJob] = useState(null);
  const [jobDetails, setJobDetails] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [dateFilter, setDateFilter] = useState('today');
  const [autoRefresh, setAutoRefresh] = useState(true);

  // Auto-refresh every 30 seconds if enabled and no modal is open
  useEffect(() => {
    if (!autoRefresh || selectedJob) return; // Pause when modal is open
    const interval = setInterval(() => {
      onRefresh?.();
    }, 30000);
    return () => clearInterval(interval);
  }, [autoRefresh, onRefresh, selectedJob]);

  // Filter jobs based on date range using Eastern Time
  const filteredJobs = useMemo(() => {
    return jobs.filter(job => {
      // Check multiple possible date fields for comprehensive coverage
      const possibleDates = [
        job.date,
        job.startTime,
        job.startedAt,
        job.createdAt,
        job.timestamp,
        job.completedAt
      ].filter(d => d && DateUtils.isValidDate(d));
      
      if (possibleDates.length === 0) return dateFilter === 'all';
      
      // Use the most relevant date (prefer start times, then creation times)
      const jobDate = job.startTime || job.startedAt || job.createdAt || 
                     job.timestamp || job.date || possibleDates[0];
      
      switch (dateFilter) {
        case 'today':
          return DateUtils.isToday(jobDate);
        case 'week':
          return DateUtils.isThisWeek(jobDate);
        case 'month':
          return DateUtils.isThisMonth(jobDate);
        case 'all':
        default:
          return true;
      }
    });
  }, [jobs, dateFilter]);

  // Open job details handler
  const openJobDetails = async (job) => {
    setSelectedJob(job);
    setLoading(true);
    setError('');
    setJobDetails(null);
    try {
      const jobId = job.id || job._id;
      if (!jobId) {
        setError('Job ID not found');
        return;
      }
      const res = await V2.get(`/jobs/${jobId}`);
      if (res.data) {
        setJobDetails(res.data);
      } else {
        setError('Job details not found');
      }
    } catch (err) {
      console.error('Job details error:', err);
      setError(err.response?.data?.error || err.message || 'Failed to load job details');
    } finally {
      setLoading(false);
    }
  };

  const closeJobDetails = () => {
    setSelectedJob(null);
    setJobDetails(null);
    setError('');
  };
  // Calculate statistics with better validation - use provided dashboardStats or calculate locally
  const stats = useMemo(() => {
    if (dashboardStats) {
      // Use the advanced stats from parent component
      const detailers = Object.values(users || {}).filter(u => u.role === 'detailer');
      return {
        totalFiltered: filteredJobs.length,
        totalToday: dashboardStats.todayCompleted,
        active: dashboardStats.totalActive,
        completed: dashboardStats.totalCompleted,
        detailers: detailers.length,
        weekCompleted: dashboardStats.weekCompleted,
        averageTimeToday: dashboardStats.averageTimeToday,
        averageTimeWeek: dashboardStats.averageTimeWeek,
        efficiency: dashboardStats.efficiency,
        qcRequired: dashboardStats.qcRequired
      };
    }
    
    // Fallback to local calculation
    const todayJobs = jobs.filter(job => {
      const jobDate = job.date || job.startTime || job.createdAt || job.timestamp;
      return DateUtils.isToday(jobDate);
    });
    
    const activeJobs = filteredJobs.filter(j => j.status === 'In Progress');
    const completedJobs = filteredJobs.filter(j => j.status === 'Completed');
    const detailers = Object.values(users || {}).filter(u => u.role === 'detailer');
    
    return {
      totalFiltered: filteredJobs.length,
      totalToday: todayJobs.length,
      active: activeJobs.length,
      completed: completedJobs.length,
      detailers: detailers.length
    };
  }, [filteredJobs, jobs, users, dashboardStats]);

  return (
    <div className="space-y-6">
      {/* Date Filter & Controls */}
      <div className="bg-white rounded-xl p-4 border border-gray-200 shadow-sm">
        <div className="flex flex-wrap items-center justify-between gap-4">
          <div className="flex items-center gap-4">
            <h4 className="text-gray-900 font-medium">Dashboard View</h4>
            <button
              onClick={() => setAutoRefresh(!autoRefresh)}
              className={`px-2 py-1 text-xs rounded-lg transition-colors ${
                autoRefresh
                  ? 'bg-green-600 text-white'
                  : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
              }`}
            >
              Auto-refresh: {autoRefresh ? 'ON' : 'OFF'}
            </button>
            <button
              onClick={() => onRefresh?.()}
              className="px-2 py-1 text-xs rounded-lg bg-gray-50 text-gray-700 hover:bg-gray-100"
            >
              🔄 Refresh
            </button>
          </div>
          <div className="flex gap-2">
            {[
              { key: 'today', label: 'Today' },
              { key: 'week', label: 'This Week' },
              { key: 'month', label: 'This Month' },
              { key: 'all', label: 'All Time' }
            ].map(option => (
              <button
                key={option.key}
                onClick={() => setDateFilter(option.key)}
                className={`px-3 py-2 text-sm rounded-lg transition-colors ${
                  dateFilter === option.key
                    ? 'bg-blue-600 text-white'
                    : 'bg-gray-50 text-gray-700 hover:bg-gray-100'
                }`}
              >
                {option.label}
              </button>
            ))}
          </div>
        </div>
        <div className="mt-2 flex justify-between items-center">
          <span className="text-sm text-gray-600">
            Showing {stats.totalFiltered} jobs for {dateFilter === 'all' ? 'all time' : dateFilter}
          </span>
          <span className="text-xs text-gray-500">
            Last updated: {DateUtils.formatDate(new Date(), {
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit'
            })}
          </span>
        </div>
      </div>

      {/* 🚀 Premium Stats Grid with Advanced Analytics */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
        <StatCard
          title="Total Jobs"
          value={stats.totalFiltered}
          change={dateFilter === 'today' ? `${stats.totalToday || stats.totalFiltered} today` : undefined}
          trend={stats.totalFiltered > (stats.totalToday || 0) ? 'up' : 'down'}
          color="blue"
          icon={
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
          }
        />
        
        <StatCard
          title="Active Jobs"
          value={stats.active}
          change={stats.active > 0 ? `${Math.round((stats.active / stats.totalFiltered) * 100)}% in progress` : 'No active jobs'}
          trend={stats.active > 0 ? 'up' : 'down'}
          color="yellow"
          icon={
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          }
        />
        
        <StatCard
          title="Completed"
          value={stats.completed}
          change={stats.completed > 0 ? `${Math.round((stats.completed / stats.totalFiltered) * 100)}% complete` : 'None yet'}
          trend={stats.completed > 0 ? 'up' : 'down'}
          color="green"
          icon={
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          }
        />
        
        <StatCard
          title="Team Members"
          value={stats.detailers}
          change={`${stats.detailers} active detailers`}
          color="purple"
          icon={
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
            </svg>
          }
        />
      </div>

      {/* 📊 Performance Analytics Dashboard */}
      {stats.averageTimeToday && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
          <GlassCard className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
              <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Average Completion Time
            </h3>
            <div className="flex items-center justify-around">
              <div className="text-center">
                <div className="text-3xl font-bold text-blue-600">{stats.averageTimeToday || 'N/A'}</div>
                <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">Today</div>
              </div>
              {stats.averageTimeWeek && (
                <div className="text-center">
                  <div className="text-3xl font-bold text-purple-600">{stats.averageTimeWeek}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400 mt-1">This Week</div>
                </div>
              )}
            </div>
          </GlassCard>

          {stats.efficiency && (
            <GlassCard className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                </svg>
                Team Efficiency
              </h3>
              <div className="flex items-center justify-center">
                <ProgressRing 
                  progress={stats.efficiency} 
                  size={140} 
                  color="#10b981"
                  label="Efficiency"
                />
              </div>
            </GlassCard>
          )}
        </div>
      )}

      {/* Active Jobs with Live Timers */}
      <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Jobs In Progress</h3>
        <div className="space-y-4">
          {filteredJobs.filter(job => job.status === 'In Progress' || job.status === 'in_progress').map(job => (
            <button
              key={job.id || job._id}
              onClick={() => openJobDetails(job)}
              className="w-full text-left bg-yellow-50 rounded-lg p-5 border border-yellow-200 hover:bg-yellow-100 transition-colors"
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-3">
                    <h4 className="text-gray-900 font-bold text-xl">
                      {job.year} {job.make} {job.model}
                    </h4>
                    {job.vehicleColor && (
                      <span className="px-2 py-1 bg-blue-50 text-blue-700 text-sm rounded-full font-medium border border-blue-200">
                        {job.vehicleColor}
                      </span>
                    )}
                    {job.priority && job.priority !== 'Normal' && (
                      <span className={`px-2 py-1 rounded-full text-sm font-bold border ${
                        job.priority === 'Urgent' ? 'bg-red-50 text-red-700 border-red-200' :
                        job.priority === 'High' ? 'bg-orange-50 text-orange-700 border-orange-200' :
                        job.priority === 'Low' ? 'bg-gray-50 text-gray-700 border-gray-200' :
                        'bg-yellow-50 text-yellow-700 border-yellow-200'
                      }`}>
                        {job.priority}
                      </span>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm mb-3">
                    <div>
                      <span className="text-gray-600">Stock:</span>
                      <span className="text-gray-900 font-medium ml-2">{job.stockNumber || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">VIN:</span>
                      <span className="font-mono text-gray-900 text-xs ml-2">{job.vin?.slice(-8) || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Service:</span>
                      <span className="text-blue-700 font-medium ml-2">{job.serviceType || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Detailer:</span>
                      <span className="text-gray-900 font-medium ml-2">{job.technicianName || job.assignedTo || 'N/A'}</span>
                    </div>
                  </div>

                  {job.salesPerson && (
                    <div className="mb-3">
                      <span className="text-gray-600 text-sm">Sales Person:</span>
                      <span className="text-green-700 font-medium text-sm ml-2">{job.salesPerson}</span>
                    </div>
                  )}

                  <div className="text-sm">
                    <span className="text-gray-600">Started:</span>
                    <span className="text-green-700 font-medium ml-2">
                      {DateUtils.formatDateTime(job.startTime || job.startedAt)}
                    </span>
                  </div>
                </div>

                <div className="text-right ml-4 min-w-[140px]">
                  <span className="px-3 py-1 rounded-full text-sm font-bold bg-yellow-50 text-yellow-700 border border-yellow-200">
                    In Progress
                  </span>
                  {(job.startTime || job.startedAt) && (
                    <div className="mt-3">
                      <LiveTimer startTime={job.startTime || job.startedAt} className="text-yellow-700 font-mono text-xl font-bold" />
                      <p className="text-gray-600 text-xs mt-1">Live Timer</p>
                    </div>
                  )}
                </div>
              </div>
            </button>
          ))}
          {filteredJobs.filter(job => job.status === 'In Progress' || job.status === 'in_progress').length === 0 && (
            <p className="text-gray-600 text-center py-8">No jobs in progress</p>
          )}
        </div>
      </div>

      {/* Recent Completed Jobs */}
      <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Recent Completed Jobs</h3>
        <div className="space-y-4">
          {filteredJobs.filter(job => job.status === 'Completed' || job.status === 'completed').slice(0, 10).map(job => (
            <button
              key={job.id || job._id}
              onClick={() => openJobDetails(job)}
              className="w-full text-left bg-gray-50 rounded-lg p-5 border border-gray-200 hover:bg-gray-100 transition-colors"
            >
              <div className="flex justify-between items-start">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-3">
                    <h4 className="text-gray-900 font-bold text-lg">
                      {job.year} {job.make} {job.model}
                    </h4>
                    {job.vehicleColor && (
                      <span className="px-2 py-1 bg-blue-50 text-blue-700 text-sm rounded-full font-medium border border-blue-200">
                        {job.vehicleColor}
                      </span>
                    )}
                    {job.priority && job.priority !== 'Normal' && (
                      <span className={`px-2 py-1 rounded-full text-sm font-bold border ${
                        job.priority === 'Urgent' ? 'bg-red-50 text-red-700 border-red-200' :
                        job.priority === 'High' ? 'bg-orange-50 text-orange-700 border-orange-200' :
                        job.priority === 'Low' ? 'bg-gray-50 text-gray-700 border-gray-200' :
                        'bg-yellow-50 text-yellow-700 border-yellow-200'
                      }`}>
                        {job.priority}
                      </span>
                    )}
                  </div>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm mb-3">
                    <div>
                      <span className="text-gray-600">Stock:</span>
                      <span className="text-gray-900 font-medium ml-2">{job.stockNumber || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">VIN:</span>
                      <span className="font-mono text-gray-900 text-xs ml-2">{job.vin?.slice(-8) || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Service:</span>
                      <span className="text-blue-700 font-medium ml-2">{job.serviceType || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Detailer:</span>
                      <span className="text-gray-900 font-medium ml-2">{job.technicianName || job.assignedTo || 'N/A'}</span>
                    </div>
                  </div>

                  {job.salesPerson && (
                    <div className="mb-3">
                      <span className="text-gray-600 text-sm">Sales Person:</span>
                      <span className="text-green-700 font-medium text-sm ml-2">{job.salesPerson}</span>
                    </div>
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                    <div>
                      <span className="text-gray-600">Started:</span>
                      <span className="text-green-700 font-medium ml-2">
                        {DateUtils.formatDateTime(job.startTime || job.startedAt)}
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-600">Completed:</span>
                      <span className="text-green-700 font-medium ml-2">
                        {DateUtils.formatDateTime(job.completedAt)}
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="text-right ml-4 min-w-[120px]">
                  <span className="px-3 py-1 rounded-full text-sm font-bold bg-green-50 text-green-700 border border-green-200">
                    Completed
                  </span>
                  {job.completedAt && (job.startTime || job.startedAt) && (
                    <div className="mt-3">
                      <p className="text-green-700 font-bold text-xl">
                        {DateUtils.formatDuration(
                          DateUtils.calculateDuration(
                            job.startTime || job.startedAt, 
                            job.completedAt
                          )
                        )}
                      </p>
                      <p className="text-gray-600 text-xs mt-1">Total Duration</p>
                    </div>
                  )}
                </div>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* Compact Job Details Modal */}
      {selectedJob && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl p-4 w-full max-w-5xl border border-gray-200 max-h-[90vh] overflow-y-auto shadow-2xl">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h4 className="text-gray-900 font-bold text-lg">
                  {selectedJob.year} {selectedJob.make} {selectedJob.model}
                </h4>
                <div className="flex gap-1.5 mt-1.5">
                  {selectedJob.vehicleColor && (
                    <span className="px-2 py-0.5 bg-blue-50 text-blue-700 text-xs rounded-full font-medium border border-blue-200">
                      {selectedJob.vehicleColor}
                    </span>
                  )}
                  {selectedJob.priority && selectedJob.priority !== 'Normal' && (
                    <span className={`px-2 py-0.5 rounded-full text-xs font-bold border ${
                      selectedJob.priority === 'Urgent' ? 'bg-red-50 text-red-700 border-red-200' :
                      selectedJob.priority === 'High' ? 'bg-orange-50 text-orange-700 border-orange-200' :
                      selectedJob.priority === 'Low' ? 'bg-gray-50 text-gray-700 border-gray-200' :
                      'bg-yellow-50 text-yellow-700 border-yellow-200'
                    }`}>
                      {selectedJob.priority}
                    </span>
                  )}
                </div>
              </div>
              <button onClick={closeJobDetails} className="text-gray-500 hover:text-gray-700 text-xl">✕</button>
            </div>

            {loading && <p className="text-gray-600 text-center py-6 text-sm">Loading...</p>}
            {error && <p className="text-red-700 text-center py-3 bg-red-50 rounded-lg border border-red-200 text-sm">{error}</p>}
            
            {jobDetails && (
              <div className="space-y-6">
                {/* Action Buttons */}
                {jobDetails.job?.status !== 'completed' && (
                  <div className="flex gap-3 mb-6">
                    <button
                      onClick={async () => { 
                        try { 
                          const jobId = jobDetails.job?.id || selectedJob?.id || selectedJob?._id;
                          if (!jobId) return alert('Job ID not found');
                          await V2.put(`/jobs/${jobId}/start`, { userId: currentUser?.id }); 
                          await onRefresh?.(); 
                          closeJobDetails(); 
                          alert('Timer started');
                        } catch (e) { 
                          alert('Start failed: ' + (e.response?.data?.error || e.message)); 
                        } 
                      }}
                      className="px-4 py-2 rounded bg-green-600 hover:bg-green-500 text-white text-sm"
                    >
                      Start Timer
                    </button>
                    <button
                      onClick={async () => { 
                        try { 
                          const jobId = jobDetails.job?.id || selectedJob?.id || selectedJob?._id;
                          if (!jobId) return alert('Job ID not found');
                          await V2.put(`/jobs/${jobId}/stop`, { userId: currentUser?.id }); 
                          await onRefresh?.(); 
                          closeJobDetails(); 
                          alert('Timer stopped');
                        } catch (e) { 
                          alert('Stop failed: ' + (e.response?.data?.error || e.message)); 
                        } 
                      }}
                      className="px-4 py-2 rounded bg-yellow-600 hover:bg-yellow-500 text-white text-sm"
                    >
                      Stop Timer
                    </button>
                    <button
                      onClick={async () => { 
                        try { 
                          const jobId = jobDetails.job?.id || selectedJob?.id || selectedJob?._id;
                          if (!jobId) return alert('Job ID not found');
                          await V2.put(`/jobs/${jobId}/complete`, { 
                            userId: currentUser?.id,
                            completedAt: new Date().toISOString()
                          }); 
                          await onRefresh?.(); 
                          closeJobDetails(); 
                          alert('Job marked complete');
                        } catch (e) { 
                          alert('Complete failed: ' + (e.response?.data?.error || e.message)); 
                        } 
                      }}
                      className="px-4 py-2 rounded bg-blue-600 hover:bg-blue-500 text-white text-sm"
                    >
                      Mark Complete
                    </button>
                  </div>
                )}

                {/* Enhanced Details Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                    <h5 className="text-gray-900 font-medium mb-3 text-lg">Vehicle Details</h5>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Stock Number:</span>
                        <span className="text-gray-900 font-medium">{jobDetails.job?.stockNumber || 'N/A'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">VIN:</span>
                        <span className="text-gray-900 font-mono text-sm">{jobDetails.job?.vin || 'N/A'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Service Type:</span>
                        <span className="text-blue-700 font-medium">{jobDetails.job?.serviceType || 'N/A'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Technician:</span>
                        <span className="text-gray-900 font-medium">{selectedJob.technicianName || 'N/A'}</span>
                      </div>
                      {jobDetails.job?.salesPerson && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Sales Person:</span>
                          <span className="text-green-700 font-medium">{jobDetails.job.salesPerson}</span>
                        </div>
                      )}
                      <div className="flex justify-between">
                        <span className="text-gray-600">Priority:</span>
                        <span className="text-gray-900 font-medium">{jobDetails.job?.priority || 'Normal'}</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                    <h5 className="text-gray-900 font-medium mb-3 text-lg">Timing & Status</h5>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Status:</span>
                        <span className={`font-medium ${
                          jobDetails.job?.status === 'In Progress' || jobDetails.job?.status === 'in_progress'
                            ? 'text-yellow-700' 
                            : jobDetails.job?.status === 'Completed' || jobDetails.job?.status === 'completed'
                            ? 'text-green-700'
                            : 'text-gray-700'
                        }`}>
                          {jobDetails.job?.status === 'in_progress' ? 'In Progress' : 
                           jobDetails.job?.status === 'completed' ? 'Completed' : 
                           jobDetails.job?.status || 'Unknown'}
                        </span>
                      </div>
                      
                      {jobDetails.job?.date && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Created:</span>
                          <span className="text-gray-700">{DateUtils.formatDateTime(jobDetails.job.date)}</span>
                        </div>
                      )}
                      
                      {(jobDetails.job?.startTime || jobDetails.job?.startedAt) && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Started:</span>
                          <span className="text-green-700">{DateUtils.formatDateTime(jobDetails.job.startTime || jobDetails.job.startedAt)}</span>
                        </div>
                      )}
                      
                      {jobDetails.job?.completedAt && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Completed:</span>
                          <span className="text-green-700">{DateUtils.formatDateTime(jobDetails.job.completedAt)}</span>
                        </div>
                      )}
                      
                      {/* Live Timer or Duration */}
                      {(jobDetails.job?.status === 'In Progress' || jobDetails.job?.status === 'in_progress') && 
                       (jobDetails.job?.startTime || jobDetails.job?.startedAt) && (
                        <div className="mt-4 p-3 bg-yellow-500/10 rounded-lg border border-yellow-400/20">
                          <p className="text-gray-400 text-sm mb-1">Current Duration:</p>
                          <LiveTimer 
                            startTime={jobDetails.job.startTime || jobDetails.job.startedAt} 
                            className="text-yellow-300 font-mono text-2xl font-bold" 
                          />
                        </div>
                      )}
                      
                      {(jobDetails.job?.status === 'Completed' || jobDetails.job?.status === 'completed') && 
                       jobDetails.job?.completedAt && (jobDetails.job?.startTime || jobDetails.job?.startedAt) && (
                        <div className="mt-4 p-3 bg-green-500/10 rounded-lg border border-green-400/20">
                          <p className="text-gray-400 text-sm mb-1">Total Duration:</p>
                          <p className="text-green-300 font-mono text-2xl font-bold">
                            {DateUtils.formatDuration(
                              DateUtils.calculateDuration(
                                jobDetails.job.startTime || jobDetails.job.startedAt, 
                                jobDetails.job.completedAt
                              )
                            )}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>

                {/* Timeline Section */}
                <div className="bg-white/5 rounded-lg p-4 border border-white/10">
                  <h5 className="text-white font-medium mb-3 text-lg">Job Timeline</h5>
                  <div className="max-h-48 overflow-y-auto pr-2">
                    {(jobDetails.events || []).filter(ev => ev && ev.type).length > 0 ? (
                      <ul className="space-y-2">
                        {jobDetails.events.filter(ev => ev && ev.type).map((ev, idx) => (
                          <li key={idx} className="flex justify-between items-center py-2 border-b border-white/10 last:border-b-0">
                            <div>
                              <span className="text-white font-medium">{ev.type}</span>
                              {ev.userName && <span className="text-gray-400 text-sm ml-2">by {ev.userName}</span>}
                            </div>
                            <span className="text-gray-400 text-sm">
                              {DateUtils.formatDateTime(ev.timestamp) || 'Unknown time'}
                            </span>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-gray-400 text-center py-4">No timeline events recorded</p>
                    )}
                  </div>
                </div>

                {/* Notes Section */}
                {jobDetails.job?.notes && (
                  <div className="bg-white rounded-lg p-4 border border-gray-200">
                    <h5 className="text-gray-900 font-medium mb-3">Notes</h5>
                    <p className="text-gray-700">{jobDetails.job.notes}</p>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

// Jobs View Component
function JobsView({ jobs, users, currentUser, onRefresh }) {
  const [selectedJob, setSelectedJob] = useState(null);
  const [jobDetails, setJobDetails] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  // Filter states
  const [filters, setFilters] = useState({
    startDate: '',
    endDate: '',
    serviceType: '',
    vehicleType: '', // new/used
    detailer: '',
    status: ''
  });

  // Get unique values for filter options
  const filterOptions = useMemo(() => {
    const serviceTypes = [...new Set(jobs.map(j => j.serviceType).filter(Boolean))];
    const detailers = Object.values(users || {}).filter(u => u.role === 'detailer');
    const statuses = [...new Set(jobs.map(j => j.status).filter(Boolean))];
    
    return { serviceTypes, detailers, statuses };
  }, [jobs, users]);

  // Filter jobs based on current filter settings
  const filteredJobs = useMemo(() => {
    return jobs.filter(job => {
      // Date filter
      if (filters.startDate) {
        const jobDate = new Date(job.date);
        const startDate = new Date(filters.startDate);
        if (jobDate < startDate) return false;
      }
      
      if (filters.endDate) {
        const jobDate = new Date(job.date);
        const endDate = new Date(filters.endDate);
        if (jobDate > endDate) return false;
      }
      
      // Service type filter
      if (filters.serviceType && job.serviceType !== filters.serviceType) return false;
      
      // Vehicle type filter (new/used)
      if (filters.vehicleType) {
        const vehicleDesc = (job.vehicleDescription || '').toLowerCase();
        if (filters.vehicleType === 'new' && !vehicleDesc.includes('new')) return false;
        if (filters.vehicleType === 'used' && vehicleDesc.includes('new')) return false;
      }
      
      // Detailer filter
      if (filters.detailer && job.technicianId !== filters.detailer) return false;
      
      // Status filter
      if (filters.status && job.status !== filters.status) return false;
      
      return true;
    });
  }, [jobs, filters]);

  const clearFilters = () => {
    setFilters({
      startDate: '',
      endDate: '',
      serviceType: '',
      vehicleType: '',
      detailer: '',
      status: ''
    });
  };

  const openDetails = async (job) => {
    setSelectedJob(job);
    setLoading(true);
    setError('');
    setJobDetails(null);
    try {
      const jobId = job.id || job._id;
      if (!jobId) {
        setError('Job ID not found');
        return;
      }
      const res = await V2.get(`/jobs/${jobId}`);
      if (res.data) {
        setJobDetails(res.data);
      } else {
        setError('Job details not found');
      }
    } catch (err) {
      console.error('Job details error:', err);
      setError(err.response?.data?.error || err.message || 'Failed to load job details');
    } finally {
      setLoading(false);
    }
  };

  const closeDetails = () => {
    setSelectedJob(null);
    setJobDetails(null);
    setError('');
  };

  return (
    <div className="space-y-6">
      {/* Compact Filters */}
      <div className="bg-white rounded-xl p-3 border border-gray-200 shadow-sm">
        <div className="flex flex-wrap gap-2 items-end">
          <div className="w-36">
            <label className="block text-gray-700 text-xs font-medium mb-1">Start Date</label>
            <input
              type="date"
              value={filters.startDate}
              onChange={e => setFilters(prev => ({ ...prev, startDate: e.target.value }))}
              className="w-full bg-white text-gray-900 text-sm border border-gray-300 rounded py-1.5 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          
          <div className="w-36">
            <label className="block text-gray-700 text-xs font-medium mb-1">End Date</label>
            <input
              type="date"
              value={filters.endDate}
              onChange={e => setFilters(prev => ({ ...prev, endDate: e.target.value }))}
              className="w-full bg-white text-gray-900 text-sm border border-gray-300 rounded py-1.5 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          
          <div className="w-40">
            <label className="block text-gray-700 text-xs font-medium mb-1">Service Type</label>
            <select
              value={filters.serviceType}
              onChange={e => setFilters(prev => ({ ...prev, serviceType: e.target.value }))}
              className="w-full bg-white text-gray-900 text-sm border border-gray-300 rounded py-1.5 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All Types</option>
              {filterOptions.serviceTypes.map(type => (
                <option key={type} value={type}>{type}</option>
              ))}
            </select>
          </div>
          
          <div className="w-32">
            <label className="block text-gray-700 text-xs font-medium mb-1">Vehicle</label>
            <select
              value={filters.vehicleType}
              onChange={e => setFilters(prev => ({ ...prev, vehicleType: e.target.value }))}
              className="w-full bg-white text-gray-900 text-sm border border-gray-300 rounded py-1.5 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All</option>
              <option value="new">New</option>
              <option value="used">Used</option>
            </select>
          </div>
          
          <div className="w-40">
            <label className="block text-gray-700 text-xs font-medium mb-1">Detailer</label>
            <select
              value={filters.detailer}
              onChange={e => setFilters(prev => ({ ...prev, detailer: e.target.value }))}
              className="w-full bg-white text-gray-900 text-sm border border-gray-300 rounded py-1.5 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All</option>
              {filterOptions.detailers.map(detailer => (
                <option key={detailer.id} value={detailer.id}>{detailer.name}</option>
              ))}
            </select>
          </div>
          
          <div className="w-32\">\n            <label className="block text-gray-700 text-xs font-medium mb-1">Status</label>
            <select
              value={filters.status}
              onChange={e => setFilters(prev => ({ ...prev, status: e.target.value }))}
              className="w-full bg-white text-gray-900 text-sm border border-gray-300 rounded py-1.5 px-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">All</option>
              {filterOptions.statuses.map(status => (
                <option key={status} value={status}>{status}</option>
              ))}
            </select>
          </div>
          
          <button
            onClick={clearFilters}
            className="px-3 py-1.5 text-sm bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium rounded-lg transition-colors"
          >
            Clear
          </button>
        </div>
        
        <div className="mt-3 text-sm text-gray-700 font-medium">
          Showing {filteredJobs.length} of {jobs.length} jobs
        </div>
      </div>

      {/* Jobs List */}
      <div className="bg-white rounded-xl p-4 md:p-6 border border-gray-200 shadow-sm">
        <h3 className="text-gray-900 font-bold text-lg mb-3">All Jobs</h3>
        <div className="job-list-container space-y-2 max-h-[600px] overflow-y-auto">
          {filteredJobs.length > 0 ? filteredJobs.map(job => (
            <div
              key={job.id || job._id}
              className="job-card bg-gray-50 rounded-lg p-3 md:p-2.5 border border-gray-200 hover:bg-gray-100 hover:border-gray-300 transition-all cursor-pointer hover:shadow-md"
              onClick={() => openDetails(job)}
            >
              {/* Main Job Header */}
              <div className="flex justify-between items-start mb-2 gap-2">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2 flex-wrap">
                    <h4 className="text-gray-900 font-bold text-base leading-tight">
                      {job.year} {job.make} {job.model}
                    </h4>
                    {job.vehicleColor && (
                      <span className="px-2 py-0.5 bg-blue-100 text-blue-800 text-xs rounded-full font-semibold border border-blue-300">
                        {job.vehicleColor}
                      </span>
                    )}
                    {job.priority && job.priority !== 'Normal' && (
                      <span className={`px-2 py-0.5 rounded-full text-xs font-bold border ${
                        job.priority === 'Urgent' ? 'priority-urgent' :
                        job.priority === 'High' ? 'priority-high' :
                        job.priority === 'Low' ? 'priority-low' :
                        'priority-normal'
                      }`}>
                        {job.priority}
                      </span>
                    )}
                  </div>
                  
                  <div className="job-info-grid grid grid-cols-2 md:grid-cols-4 gap-1.5 md:gap-2 text-xs mb-2">
                    <div>
                      <span className="text-gray-600 font-medium">Stock:</span>
                      <span className="text-gray-900 font-bold ml-1">{job.stockNumber || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600 font-medium">VIN:</span>
                      <span className="font-mono text-gray-900 font-bold text-xs ml-1">{job.vin?.slice(-8) || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600 font-medium">Service:</span>
                      <span className="text-blue-700 font-bold ml-1">{job.serviceType || 'N/A'}</span>
                    </div>
                    <div>
                      <span className="text-gray-600 font-medium">Detailer:</span>
                      <span className="text-gray-900 font-bold ml-1">{job.technicianName || job.assignedTo || 'N/A'}</span>
                    </div>
                  </div>

                  {job.salesPerson && (
                    <div className="mb-2">
                      <span className="text-gray-600 text-xs font-medium">Sales:</span>
                      <span className="text-green-700 font-bold text-xs ml-1">{job.salesPerson}</span>
                    </div>
                  )}

                  {/* Timing Information */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-2 text-xs">
                    {job.startTime || job.startedAt ? (
                      <div>
                        <span className="text-gray-600">Started:</span>
                        <span className="text-green-700 font-medium ml-2">
                          {DateUtils.formatDateTime(job.startTime || job.startedAt)}
                        </span>
                      </div>
                    ) : (
                      <div>
                        <span className="text-gray-600">Created:</span>
                        <span className="text-gray-700 ml-2">
                          {DateUtils.formatDateTime(job.date || job.createdAt)}
                        </span>
                      </div>
                    )}
                    
                    {job.completedAt && (
                      <div>
                        <span className="text-gray-600">Completed:</span>
                        <span className="text-green-700 font-medium ml-2">
                          {DateUtils.formatDateTime(job.completedAt)}
                        </span>
                      </div>
                    )}
                  </div>
                </div>

                {/* Status and Duration */}
                <div className="text-right ml-2 min-w-[100px]">
                  <div className={`status-badge px-2 md:px-3 py-1 rounded-full text-xs font-bold border mb-2 ${
                    job.status === 'In Progress' || job.status === 'in_progress'
                      ? 'status-in-progress' 
                      : job.status === 'Completed' || job.status === 'completed'
                      ? 'status-completed'
                      : job.status === 'QC Required'
                      ? 'status-qc-required'
                      : job.status === 'Failed QC'
                      ? 'status-failed-qc'
                      : 'status-pending'
                  }`}>
                    {job.status === 'in_progress' ? 'In Progress' : 
                     job.status === 'completed' ? 'Completed' : 
                     job.status || 'Pending'}
                  </div>
                  
                  {(job.status === 'In Progress' || job.status === 'in_progress') && job.startTime && (
                    <div className="mt-2">
                      <LiveTimer startTime={job.startTime} className="text-yellow-300 font-mono text-xl font-bold" />
                      <p className="text-gray-400 text-xs mt-1">Live Timer</p>
                    </div>
                  )}
                  
                  {(job.status === 'Completed' || job.status === 'completed') && job.completedAt && (job.startTime || job.startedAt) && (
                    <div className="mt-2">
                      <p className="text-green-300 font-bold text-xl">
                        {DateUtils.formatDuration(
                          DateUtils.calculateDuration(
                            job.startTime || job.startedAt, 
                            job.completedAt
                          )
                        )}
                      </p>
                      <p className="text-gray-400 text-xs mt-1">Total Duration</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )) : (
            <div className="text-center py-12">
              <p className="text-gray-400 text-lg">No jobs found matching your filters</p>
              <button
                onClick={clearFilters}
                className="mt-4 px-4 py-2 bg-blue-500/20 hover:bg-blue-500/30 text-blue-300 rounded-lg border border-blue-400/30 transition-colors"
              >
                Clear Filters
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Compact Job Details Modal */}
      {selectedJob && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl p-4 w-full max-w-5xl border border-gray-200 max-h-[90vh] overflow-y-auto shadow-2xl">
            <div className="flex justify-between items-start mb-3">
              <div>
                <h4 className="text-gray-900 font-bold text-lg">
                  {selectedJob.year} {selectedJob.make} {selectedJob.model}
                </h4>
                {selectedJob.vehicleColor && (
                  <span className="inline-block px-2 py-0.5 bg-blue-50 text-blue-700 text-xs rounded-full font-medium border border-blue-200 mt-1">
                    {selectedJob.vehicleColor}
                  </span>
                )}
              </div>
              <button onClick={closeDetails} className="text-gray-500 hover:text-gray-700 text-xl">✕</button>
            </div>
            {loading && <p className="text-gray-600 text-center py-6 text-sm">Loading details...</p>}
            {error && <p className="text-red-700 text-center py-3 bg-red-50 rounded-lg border border-red-200 text-sm">{error}</p>}
            
            {jobDetails && (
              <div className="space-y-4">
                {/* Compact 3-Column Details Grid */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
                    <h5 className="text-gray-900 font-semibold mb-2 text-sm">Vehicle Info</h5>
                    <div className="space-y-1.5 text-xs">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Vehicle:</span>
                        <span className="text-gray-900 font-medium text-right">{selectedJob.vehicleDescription || 'N/A'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Stock:</span>
                        <span className="text-gray-900 font-medium">{jobDetails.job?.stockNumber || 'N/A'}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">VIN:</span>
                        <span className="text-gray-900 font-mono text-xs">{jobDetails.job?.vin?.slice(0,10) || 'N/A'}...</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Service:</span>
                        <span className="text-blue-700 font-medium">{jobDetails.job?.serviceType || 'N/A'}</span>
                      </div>
                      {jobDetails.job?.salesPerson && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Sales:</span>
                          <span className="text-green-700 font-medium text-xs">{jobDetails.job.salesPerson}</span>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
                    <h5 className="text-gray-900 font-semibold mb-2 text-sm">Timing & Status</h5>
                    <div className="space-y-1.5 text-xs">
                      <div className="flex justify-between">
                        <span className="text-gray-600">Status:</span>
                        <span className={`font-medium ${
                          jobDetails.job?.status === 'In Progress' || jobDetails.job?.status === 'in_progress'
                            ? 'text-yellow-700' 
                            : jobDetails.job?.status === 'Completed' || jobDetails.job?.status === 'completed'
                            ? 'text-green-700'
                            : 'text-gray-700'
                        }`}>
                          {jobDetails.job?.status === 'in_progress' ? 'In Progress' : 
                           jobDetails.job?.status === 'completed' ? 'Completed' : 
                           jobDetails.job?.status || 'Unknown'}
                        </span>
                      </div>
                      
                      {jobDetails.job?.date && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Created:</span>
                          <span className="text-gray-700">{DateUtils.formatDate(jobDetails.job.date)}</span>
                        </div>
                      )}
                      
                      {(jobDetails.job?.startTime || jobDetails.job?.startedAt) && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Started:</span>
                          <span className="text-green-700">{DateUtils.formatTime(jobDetails.job.startTime || jobDetails.job.startedAt)}</span>
                        </div>
                      )}
                      
                      {jobDetails.job?.completedAt && (
                        <div className="flex justify-between">
                          <span className="text-gray-600">Completed:</span>
                          <span className="text-green-700">{DateUtils.formatTime(jobDetails.job.completedAt)}</span>
                        </div>
                      )}
                      
                      {/* Live Timer or Duration */}
                      {(jobDetails.job?.status === 'In Progress' || jobDetails.job?.status === 'in_progress') && 
                       (jobDetails.job?.startTime || jobDetails.job?.startedAt) && (
                        <div className="mt-2 p-2 bg-yellow-50 rounded border border-yellow-200">
                          <p className="text-gray-600 text-xs mb-0.5">Duration:</p>
                          <LiveTimer 
                            startTime={jobDetails.job.startTime || jobDetails.job.startedAt} 
                            className="text-yellow-700 font-mono text-base font-bold" 
                          />
                        </div>
                      )}
                      
                      {(jobDetails.job?.status === 'Completed' || jobDetails.job?.status === 'completed') && 
                       jobDetails.job?.completedAt && (jobDetails.job?.startTime || jobDetails.job?.startedAt) && (
                        <div className="mt-2 p-2 bg-green-50 rounded border border-green-200">
                          <p className="text-gray-600 text-xs mb-0.5">Total:</p>
                          <p className="text-green-700 font-mono text-base font-bold">
                            {DateUtils.formatDuration(
                              DateUtils.calculateDuration(
                                jobDetails.job.startTime || jobDetails.job.startedAt, 
                                jobDetails.job.completedAt
                              )
                            )}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 rounded-lg p-3 border border-gray-200">
                    <h5 className="text-gray-900 font-semibold mb-2 text-sm">Team & Activity</h5>
                    <div className="space-y-2 text-xs">
                      {(jobDetails.technicians || []).length > 0 && (
                        <div>
                          <p className="text-gray-600 mb-1">Technicians:</p>
                          <div className="space-y-0.5">
                            {(jobDetails.technicians || []).map(t => (
                              <p key={t.userId} className="text-gray-900 font-medium">• {t.userName || t.name || t.userId}</p>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {(jobDetails.events || []).length > 0 && (
                        <div className="mt-2">
                          <p className="text-gray-600 mb-1">Recent Events:</p>
                          <div className="space-y-0.5 max-h-24 overflow-y-auto">
                            {(jobDetails.events || []).slice(0, 4).map((ev, idx) => (
                              <p key={idx} className="text-gray-700 text-xs">
                                • {ev.type?.replace('_', ' ')?.replace(/\b\w/g, l => l.toUpperCase()) || 'Event'}
                              </p>
                            ))}
                          </div>
                        </div>
                      )}
                      
                      {(!jobDetails.technicians || jobDetails.technicians.length === 0) && 
                       (!jobDetails.events || jobDetails.events.length === 0) && (
                        <p className="text-gray-500 text-center py-4">No activity</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Compact Action Buttons */}
                {jobDetails.job?.status !== 'completed' && (
                  <div className="flex flex-wrap gap-2">
                    <button
                      onClick={async () => { 
                        try { 
                          const jobId = jobDetails.job?.id || selectedJob?.id || selectedJob?._id;
                          if (!jobId) return alert('Job ID not found');
                          await V2.put(`/jobs/${jobId}/start`, { userId: currentUser?.id }); 
                          await onRefresh?.(); 
                          closeDetails(); 
                          alert('Timer started');
                        } catch (e) { 
                          alert('Start failed: ' + (e.response?.data?.error || e.message)); 
                        } 
                      }}
                      className="px-3 py-1.5 rounded bg-green-600 hover:bg-green-700 text-white text-sm font-medium transition-colors"
                    >
                      Start Timer
                    </button>
                    <button
                      onClick={async () => { 
                        try { 
                          const jobId = jobDetails.job?.id || selectedJob?.id || selectedJob?._id;
                          if (!jobId) return alert('Job ID not found');
                          await V2.put(`/jobs/${jobId}/stop`, { userId: currentUser?.id }); 
                          await onRefresh?.(); 
                          closeDetails(); 
                          alert('Timer stopped');
                        } catch (e) { 
                          alert('Stop failed: ' + (e.response?.data?.error || e.message)); 
                        } 
                      }}
                      className="px-3 py-1.5 rounded bg-yellow-600 hover:bg-yellow-700 text-white text-sm font-medium transition-colors"
                    >
                      Stop Timer
                    </button>
                    <button
                      onClick={async () => { 
                        try { 
                          const jobId = jobDetails.job?.id || selectedJob?.id || selectedJob?._id;
                          if (!jobId) return alert('Job ID not found');
                          await V2.put(`/jobs/${jobId}/complete`, { 
                            userId: currentUser?.id,
                            completedAt: new Date().toISOString()
                          }); 
                          await onRefresh?.(); 
                          closeDetails(); 
                          alert('Job marked complete');
                        } catch (e) { 
                          alert('Complete failed: ' + (e.response?.data?.error || e.message)); 
                        } 
                      }}
                      className="px-3 py-1.5 rounded bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium transition-colors"
                    >
                      Mark Complete
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}

// Users View Component
function UsersView({ users, detailers, onDeleteUser }) {
  const [newUser, setNewUser] = useState({ name: '', pin: '', role: 'detailer', phone: '' });
  const [isAdding, setIsAdding] = useState(false);

  const handleAddDetailer = async (e) => {
    e.preventDefault();
    if (!newUser.name || !newUser.pin) return;
    if (newUser.pin.length !== 4) {
      alert('PIN must be exactly 4 digits');
      return;
    }

    setIsAdding(true);
    try {
      await V2.post('/users', {
        name: newUser.name,
        pin: newUser.pin,
        role: newUser.role,
        phone: newUser.phone
      });
      setNewUser({ name: '', pin: '', role: 'detailer', phone: '' });
      alert('User added successfully');
      // FIXED: Reload users to show new team member
      window.location.reload();
    } catch (err) {
      alert('Failed to add user: ' + (err.response?.data?.error || err.message));
    } finally {
      setIsAdding(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Add New User */}
      <div className="bg-white rounded-xl p-6 border border-gray-200">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Add New Team Member</h3>
        <form onSubmit={handleAddDetailer} className="space-y-4">
          <input
            type="text"
            value={newUser.name}
            onChange={(e) => setNewUser({...newUser, name: e.target.value})}
            placeholder="Full Name"
            className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
          <input
            type="text"
            value={newUser.pin}
            onChange={(e) => setNewUser({...newUser, pin: e.target.value})}
            placeholder="4-Digit PIN"
            maxLength="4"
            className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
            required
          />
          <input
            type="tel"
            value={newUser.phone}
            onChange={(e) => setNewUser({...newUser, phone: e.target.value})}
            placeholder="Phone Number (optional)"
            className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          <div>
            <label className="block text-gray-700 text-sm mb-2">Role</label>
            <select
              value={newUser.role}
              onChange={(e) => setNewUser({...newUser, role: e.target.value})}
              className="w-full bg-gray-50 text-gray-900 border border-gray-300 rounded-lg py-3 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="detailer">Detailer</option>
              <option value="salesperson">Salesperson</option>
              <option value="manager">Manager</option>
            </select>
          </div>
          <button 
            type="submit"
            disabled={isAdding}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition-colors disabled:bg-gray-400"
          >
            {isAdding ? 'Adding...' : 'Add Member'}
          </button>
        </form>
      </div>

      {/* Current Team Members */}
      <div className="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Team Members</h3>
        <div className="space-y-3">
          {detailers.map(user => (
            <div key={user.id || user._id} className="bg-gray-50 rounded-lg p-4 border border-gray-200 flex justify-between items-start">
              <div className="flex-1">
                <div className="flex items-center gap-2 mb-1">
                  <p className="text-gray-900 font-medium">{user.name}</p>
                  <span className={`px-2 py-1 text-xs rounded-full font-medium ${
                    user.role === 'manager' ? 'bg-purple-100 text-purple-800' :
                    user.role === 'salesperson' ? 'bg-green-100 text-green-800' :
                    'bg-blue-100 text-blue-800'
                  }`}>
                    {user.role}
                  </span>
                </div>
                <p className="text-gray-600 text-sm">PIN: {user.pin}</p>
                {user.phone && (
                  <div className="flex items-center gap-2 mt-1">
                    <p className="text-gray-600 text-sm">Phone: {user.phone}</p>
                    <button 
                      onClick={() => {
                        const message = `Hi ${user.name}, you have a new job assignment. Please check the system for details.`;
                        window.open(`sms:${user.phone}?body=${encodeURIComponent(message)}`, '_blank');
                      }}
                      className="text-blue-600 hover:text-blue-800 text-sm underline"
                    >
                      Send SMS
                    </button>
                  </div>
                )}
              </div>
              <button 
                onClick={() => onDeleteUser(user.id || user._id)}
                className="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transition-colors"
              >
                Delete
              </button>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

// Enhanced Reports View Component with Interactive Analytics
// DEPRECATED: This component has been replaced by EnhancedReports.js
// Keeping for reference only
/* eslint-disable no-unused-vars */
function ReportsView({ jobs = [], users = {} }) {
  const [start, setStart] = useState('');
  const [end, setEnd] = useState('');
  const [selectedDetailer, setSelectedDetailer] = useState(null);
  const [selectedServiceType, setSelectedServiceType] = useState(null);
  const [drillDownJobs, setDrillDownJobs] = useState([]);
  const [showDrillDown, setShowDrillDown] = useState(false);
  const [error, setError] = useState(null);
  const [reportData, setReportData] = useState(null);
  const [loading, setLoading] = useState(false);

  // Fetch reports data from API
  const fetchReportsData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const params = new URLSearchParams();
      if (start) params.append('startDate', start);
      if (end) params.append('endDate', end);
      
      const response = await V2.get('/reports?' + params.toString());
      setReportData(response.data);
    } catch (err) {
      console.error('Reports fetch error:', err);
      setError('Failed to load reports: ' + (err.response?.data?.error || err.message));
    } finally {
      setLoading(false);
    }
  }, [start, end]);

  // Fetch data on mount and when dates change
  useEffect(() => {
    fetchReportsData();
  }, [fetchReportsData]);

  const filtered = useMemo(() => {
    try {
      if (!start && !end) return jobs;
      const s = start ? new Date(start) : null;
      const e = end ? new Date(end) : null;
      return jobs.filter(j => {
        const jobDate = new Date(j.date || j.startTime || j.createdAt);
        if (s && jobDate < s) return false;
        if (e && jobDate > e) return false;
        return true;
      });
    } catch (err) {
      console.error('Filter error:', err);
      return jobs;
    }
  }, [jobs, start, end]);

  // Use API data if available, fallback to client-side calculation
  const displayData = useMemo(() => {
    if (reportData) {
      return {
        totalLast7Days: reportData.last7Days,
        completedLast7Days: reportData.last7Days, // Assume completed for now
        serviceTypeCounts: reportData.serviceTypes.reduce((acc, st) => ({ ...acc, [st.name]: st.jobs }), {}),
        serviceTypePerformance: reportData.serviceTypes,
        detailerPerformance: reportData.detailerPerformance,
        dailyStats: reportData.dailyTrends.reduce((acc, day) => ({ 
          ...acc, 
          [day.date]: { total: day.jobs, completed: day.completed } 
        }), {}),
        filteredTotal: reportData.periodTotal,
        filteredCompleted: reportData.completed,
        completionRate: reportData.completionRate
      };
    }
    
    // Fallback to filtered jobs if no API data
    const fallbackFiltered = filtered.length > 0 ? filtered : jobs;
    return {
      totalLast7Days: fallbackFiltered.length,
      completedLast7Days: fallbackFiltered.filter(j => j.status === 'Completed').length,
      serviceTypeCounts: fallbackFiltered.reduce((acc, job) => {
        acc[job.serviceType] = (acc[job.serviceType] || 0) + 1;
        return acc;
      }, {}),
      serviceTypePerformance: [],
      detailerPerformance: [],
      dailyStats: {},
      filteredTotal: fallbackFiltered.length,
      filteredCompleted: fallbackFiltered.filter(j => j.status === 'Completed').length,
      completionRate: fallbackFiltered.length > 0 ? Math.round((fallbackFiltered.filter(j => j.status === 'Completed').length / fallbackFiltered.length) * 100) : 0
    };
  }, [reportData, filtered, jobs]);

  // Interactive drill-down functions
  const handleDetailerClick = (detailer) => {
    setSelectedDetailer(detailer.name || detailer);
    setDrillDownJobs(detailer.recentJobs || []);
    setShowDrillDown(true);
  };

  const handleServiceTypeClick = (serviceType) => {
    setSelectedServiceType(serviceType.name || serviceType);
    setDrillDownJobs(serviceType.jobs || []);
    setShowDrillDown(true);
  };

  const closeDrillDown = () => {
    setShowDrillDown(false);
    setSelectedDetailer(null);
    setSelectedServiceType(null);
    setDrillDownJobs([]);
  };



  const exportPdf = async () => {
    try {
      // Create comprehensive HTML report that can be printed as PDF
      const period = start && end ? `${start} to ${end}` : 'All Time';
      
      const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Cleanup Tracker Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: white; color: black; }
        .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #333; padding-bottom: 15px; }
        .section { margin-bottom: 25px; }
        .section h2 { background: #f0f0f0; padding: 10px; margin: 0 0 15px 0; border-left: 4px solid #007acc; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-bottom: 20px; }
        .stat-card { background: #f9f9f9; padding: 15px; border-radius: 8px; border: 1px solid #ddd; }
        .stat-value { font-size: 24px; font-weight: bold; color: #007acc; }
        .stat-label { font-size: 12px; color: #666; text-transform: uppercase; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #f0f0f0; font-weight: bold; }
        .performance-table td:nth-child(2), .performance-table td:nth-child(3), .performance-table td:nth-child(4), .performance-table td:nth-child(5) { text-align: right; }
        .service-item { margin-bottom: 8px; padding: 8px; background: #f9f9f9; border-radius: 4px; }
        .footer { text-align: center; margin-top: 30px; font-size: 12px; color: #666; }
        @media print { body { margin: 0; } .no-print { display: none; } }
    </style>
</head>
<body>
    <div class="header">
        <h1>🚗 CLEANUP TRACKER</h1>
        <h2>Performance Report</h2>
        <p><strong>Report Period:</strong> ${period} | <strong>Generated:</strong> ${new Date().toLocaleString()}</p>
    </div>
    
    <div class="section">
        <h2>📊 Summary Statistics</h2>
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value">${displayData.filteredTotal}</div>
                <div class="stat-label">Total Jobs</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${displayData.filteredCompleted}</div>
                <div class="stat-label">Completed Jobs</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${displayData.avgEfficiency || 'N/A'}</div>
                <div class="stat-label">Avg Time/Job</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${displayData.totalLast7Days}</div>
                <div class="stat-label">Last 7 Days</div>
            </div>
        </div>
    </div>

    <div class="section">
        <h2>👥 Detailer Performance</h2>
        <table class="performance-table">
            <thead>
                <tr>
                    <th>Detailer Name</th>
                    <th>Total Jobs</th>
                    <th>Completed</th>
                    <th>Success Rate</th>
                    <th>Avg Time</th>
                    <th>Top Services</th>
                </tr>
            </thead>
            <tbody>
                ${displayData.detailerPerformance.map(perf => {
                    const completionRate = perf.totalJobs ? Math.round((perf.completedJobs / perf.totalJobs) * 100) : 0;
                    const avgTimeStr = perf.avgTime ? DateUtils.formatDuration(perf.avgTime) : 'N/A';
                    const topServices = Object.entries(perf.serviceTypes).sort(([,a], [,b]) => b - a).slice(0, 3).map(([k,v]) => `${k}(${v})`).join(', ');
                    return `
                    <tr>
                        <td><strong>${perf.name}</strong></td>
                        <td>${perf.totalJobs}</td>
                        <td>${perf.completedJobs}</td>
                        <td>${completionRate}%</td>
                        <td>${avgTimeStr}</td>
                        <td>${topServices}</td>
                    </tr>`;
                }).join('')}
            </tbody>
        </table>
    </div>

    <div class="section">
        <h2>🔧 Service Type Breakdown</h2>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
            ${Object.entries(displayData.serviceTypeCounts).map(([type, count]) => {
                const percentage = displayData.filteredTotal ? Math.round((count / displayData.filteredTotal) * 100) : 0;
                return `<div class="service-item"><strong>${type}</strong>: ${count} jobs (${percentage}%)</div>`;
            }).join('')}
        </div>
    </div>

    <div class="section">
        <h2>📅 Recent Activity</h2>
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Detailer</th>
                    <th>Service</th>
                    <th>Vehicle</th>
                    <th>Status</th>
                    <th>Duration</th>
                </tr>
            </thead>
            <tbody>
                ${filtered.slice(0, 50).map(job => {
                    const duration = job.duration ? DateUtils.formatDuration(job.duration) : DateUtils.formatDuration(DateUtils.calculateDuration(job.startTime || job.startedAt, job.completedAt));
                    return `
                    <tr>
                        <td>${job.date}</td>
                        <td>${job.technicianName}</td>
                        <td>${job.serviceType}</td>
                        <td>${job.vehicleDescription}</td>
                        <td>${job.status}</td>
                        <td>${duration}</td>
                    </tr>`;
                }).join('')}
            </tbody>
        </table>
    </div>

    <div class="footer">
        <p>Report generated by Cleanup Tracker - Mission Ford of Dearborn</p>
        <p class="no-print">To save as PDF: Use your browser's Print function and select "Save as PDF"</p>
    </div>
</body>
</html>`;

      // Create and open HTML report in new window for printing/PDF
      const newWindow = window.open('', '_blank');
      newWindow.document.write(htmlContent);
      newWindow.document.close();
      
      // Auto-trigger print dialog
      setTimeout(() => {
        newWindow.print();
      }, 1000);
      
      alert('PDF report opened in new window. Use your browser\'s print function to save as PDF.');
    } catch (err) {
      alert('Export failed: ' + err.message);
    }
  };

  // Error boundary for reports
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white rounded-xl p-8 shadow-lg border border-red-200">
            <div className="text-center">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
              </div>
              <h3 className="text-red-800 font-bold text-xl mb-2">Reports Error</h3>
              <p className="text-red-600 mb-6 max-w-md mx-auto">{error}</p>
              <button 
                onClick={() => setError(null)}
                className="px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg shadow-lg transition-all"
              >
                Try Again
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Enhanced Loading state with better animations
  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-white/80 backdrop-blur-sm rounded-xl p-12 shadow-xl border border-white/20 text-center">
            <div className="relative mb-8">
              <div className="animate-spin w-16 h-16 border-4 border-blue-200 rounded-full mx-auto"></div>
              <div className="animate-spin w-16 h-16 border-t-4 border-blue-600 rounded-full mx-auto absolute top-0 left-1/2 transform -translate-x-1/2"></div>
            </div>
            <div className="space-y-3">
              <p className="text-gray-900 text-xl font-bold animate-pulse">Loading Cleanup Tracker</p>
              <p className="text-gray-700 text-base">Gathering your reports and analytics...</p>
              <div className="flex justify-center space-x-1 mt-4">
                <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                <div className="w-2 h-2 bg-blue-600 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Filters & Export */}
        <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">📊 Reports Dashboard</h2>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 items-end mb-4">
            <div>
              <label className="block text-gray-700 text-sm font-semibold mb-2">Start Date</label>
              <input type="date" value={start} onChange={e => setStart(e.target.value)} className="w-full bg-white text-gray-900 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            </div>
            <div>
              <label className="block text-gray-700 text-sm font-semibold mb-2">End Date</label>
              <input type="date" value={end} onChange={e => setEnd(e.target.value)} className="w-full bg-white text-gray-900 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
            </div>
            <div className="md:col-span-2 flex gap-2">
              <button
                onClick={() => {
                  const headers = ['Date', 'Technician', 'Service Type', 'Vehicle', 'Status', 'Duration'].join(',');
                  const rows = filtered.map(job => {
                    const duration = job.duration || DateUtils.calculateDuration(job.startTime || job.startedAt, job.completedAt);
                    return [
                      job.date,
                      job.technicianName || 'Unknown',
                      job.serviceType || 'N/A',
                      job.vehicleDescription || '',
                      job.status || 'Unknown',
                      DateUtils.formatDuration(duration)
                    ].map(v => `"${v}"`).join(',');
                  });
                  const csv = [headers, ...rows].join('\n');
                  const blob = new Blob([csv], { type: 'text/csv' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'cleanup-tracker-report.csv';
                  a.click();
                  URL.revokeObjectURL(url);
                }}
                className="px-4 py-2 rounded-lg bg-blue-600 hover:bg-blue-700 text-white text-sm font-semibold shadow-lg transition-all flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Export CSV
              </button>
              <button
                onClick={() => {
                  const json = JSON.stringify(filtered, null, 2);
                  const blob = new Blob([json], { type: 'application/json' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'cleanup-tracker-report.json';
                  a.click();
                  URL.revokeObjectURL(url);
                }}
                className="px-4 py-2 rounded-lg bg-green-600 hover:bg-green-700 text-white text-sm font-semibold shadow-lg transition-all flex items-center gap-2"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                </svg>
                Export JSON
              </button>
              <button
                onClick={exportPdf}
                className="px-4 py-2 rounded-lg bg-green-600 hover:bg-green-700 text-white text-sm font-semibold shadow-lg transition-all"
              >
                📄 Export Report
              </button>
              <button
                onClick={() => { setStart(''); setEnd(''); }}
                className="px-4 py-2 rounded-lg border border-gray-300 text-gray-700 bg-gray-50 hover:bg-gray-100 text-sm font-semibold shadow transition-all"
              >
                Clear
              </button>
            </div>
          </div>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
            <h4 className="text-gray-600 text-sm font-semibold mb-2">Period Total</h4>
            <p className="text-3xl font-bold text-gray-900">{displayData.filteredTotal}</p>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
            <h4 className="text-gray-600 text-sm font-semibold mb-2">Completed</h4>
            <p className="text-3xl font-bold text-green-600">{displayData.filteredCompleted}</p>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
            <h4 className="text-gray-600 text-sm font-semibold mb-2">Avg Time/Job</h4>
            <p className="text-3xl font-bold text-blue-600">{displayData.avgEfficiency || 'N/A'}</p>
          </div>
          <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
            <h4 className="text-gray-600 text-sm font-semibold mb-2">Last 7 Days</h4>
            <p className="text-3xl font-bold text-orange-600">{displayData.totalLast7Days}</p>
          </div>
        </div>

        {/* Detailer Performance - Click to see details */}
        <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
          <h3 className="text-gray-900 font-bold text-xl mb-6">📈 Detailer Performance (Click for Details)</h3>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-200">
                  <th className="text-left text-gray-700 text-sm font-semibold py-3">Name</th>
                  <th className="text-right text-gray-700 text-sm font-semibold py-3">Total Jobs</th>
                  <th className="text-right text-gray-700 text-sm font-semibold py-3">Avg Time</th>
                  <th className="text-right text-gray-700 text-sm font-semibold py-3">Min Time</th>
                  <th className="text-right text-gray-700 text-sm font-semibold py-3">Max Time</th>
                  <th className="text-right text-gray-700 text-sm font-semibold py-3">Recent Jobs</th>
                </tr>
              </thead>
              <tbody>
                {displayData.detailerPerformance.map((perf, idx) => {
                  const avgTimeStr = perf.avgTime ? DateUtils.formatDuration(perf.avgTime) : 'N/A';
                  const minTimeStr = perf.minTime ? DateUtils.formatDuration(perf.minTime) : 'N/A';
                  const maxTimeStr = perf.maxTime ? DateUtils.formatDuration(perf.maxTime) : 'N/A';
                  return (
                    <tr 
                      key={idx} 
                      className="border-b border-gray-100 cursor-pointer hover:bg-blue-50 transition-all"
                      onClick={() => handleDetailerClick(perf.name)}
                    >
                      <td className="text-gray-900 py-3 font-medium">{perf.name}</td>
                      <td className="text-gray-700 text-right py-3">{perf.totalJobs}</td>
                      <td className="text-green-600 text-right py-3 font-medium">{avgTimeStr}</td>
                      <td className="text-blue-600 text-right py-3">{minTimeStr}</td>
                      <td className="text-red-600 text-right py-3">{maxTimeStr}</td>
                      <td className="text-gray-700 text-right py-3">{perf.recentJobs ? perf.recentJobs.length : 0}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        {/* Service Type Breakdown - Click to see details */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
            <h3 className="text-gray-900 font-bold text-xl mb-6">🔧 Service Types (Click for Details)</h3>
            <div className="space-y-3">
              {(displayData.serviceTypePerformance || []).map((data, idx) => {
                const avgTimeStr = data.avgTime ? DateUtils.formatDuration(data.avgTime) : 'N/A';
                const minTimeStr = data.minTime ? DateUtils.formatDuration(data.minTime) : 'N/A';
                const maxTimeStr = data.maxTime ? DateUtils.formatDuration(data.maxTime) : 'N/A';
                return (
                  <div 
                    key={idx} 
                    className="space-y-3 p-4 bg-gray-50 rounded-lg cursor-pointer hover:bg-blue-50 transition-all border border-gray-200"
                    onClick={() => handleServiceTypeClick(data)}
                  >
                    <div className="flex justify-between items-center">
                      <span className="text-gray-900 font-semibold">{data.name}</span>
                      <span className="text-gray-600 text-sm font-medium">{data.jobs?.length || 0} jobs</span>
                    </div>
                    <div className="grid grid-cols-3 gap-2 text-sm">
                      <div className="text-center">
                        <div className="text-green-600 font-semibold">{avgTimeStr}</div>
                        <div className="text-gray-500 text-xs">Avg Time</div>
                      </div>
                      <div className="text-center">
                        <div className="text-blue-600 font-semibold">{minTimeStr}</div>
                        <div className="text-gray-500 text-xs">Min Time</div>
                      </div>
                      <div className="text-center">
                        <div className="text-red-600 font-semibold">{maxTimeStr}</div>
                        <div className="text-gray-500 text-xs">Max Time</div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          <div className="bg-white rounded-xl p-6 shadow-lg border border-gray-200">
            <h3 className="text-gray-900 font-bold text-xl mb-6">📅 Daily Trends</h3>
            <div className="space-y-3 max-h-64 overflow-y-auto">
              {Object.entries(displayData.dailyStats || {})
                .sort(([a], [b]) => new Date(b) - new Date(a))
                .slice(0, 10)
                .map(([date, stats]) => {
                  const rate = stats.total ? Math.round((stats.completed / stats.total) * 100) : 0;
                  return (
                    <div key={date} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg border border-gray-200">
                      <span className="text-gray-900 text-sm font-medium">{new Date(date).toLocaleDateString()}</span>
                      <span className="text-gray-700 text-sm font-semibold">{stats.completed}/{stats.total} ({rate}%)</span>
                    </div>
                  );
                })
              }
            </div>
          </div>
        </div>

        {/* Drill-Down Modal */}
        {showDrillDown && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-xl p-6 max-w-6xl w-full max-h-[80vh] overflow-y-auto shadow-2xl border border-gray-200">
              <div className="flex justify-between items-center mb-6">
                <h3 className="text-gray-900 font-bold text-2xl">
                  {selectedDetailer ? `${selectedDetailer} - Job Details` : `${selectedServiceType} - Job Details`}
                </h3>
                <button
                  onClick={closeDrillDown}
                  className="text-gray-500 hover:text-gray-700 transition-colors text-2xl font-bold"
                >
                  ✕
                </button>
              </div>
              
              <div className="mb-4 text-gray-700 font-semibold">
                Showing {drillDownJobs.length} jobs
              </div>

              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b-2 border-gray-200">
                      <th className="text-left text-gray-700 text-sm font-bold py-3">VIN</th>
                      <th className="text-left text-gray-700 text-sm font-bold py-3">Service Type</th>
                      <th className="text-left text-gray-700 text-sm font-bold py-3">Detailer</th>
                      <th className="text-left text-gray-700 text-sm font-bold py-3">Status</th>
                      <th className="text-left text-gray-700 text-sm font-bold py-3">Duration</th>
                      <th className="text-left text-gray-700 text-sm font-bold py-3">Started</th>
                      <th className="text-left text-gray-700 text-sm font-bold py-3">Completed</th>
                    </tr>
                  </thead>
                  <tbody>
                    {drillDownJobs.map((job, idx) => {
                      const startTime = DateUtils.getValidDate(job.startTime || job.startedAt || job.createdAt || job.timestamp || job.date);
                      const endTime = DateUtils.getValidDate(job.completedAt);
                      const duration = startTime && endTime ? 
                        DateUtils.formatDuration(DateUtils.calculateDuration(startTime, endTime)) : 
                        (startTime ? 'In Progress' : 'N/A');
                      
                      return (
                        <tr key={idx} className="border-b border-gray-100 hover:bg-blue-50 transition-all">
                          <td className="text-gray-900 py-3 font-mono text-sm">{job.vin || 'N/A'}</td>
                          <td className="text-gray-700 py-3">{job.serviceType || 'N/A'}</td>
                          <td className="text-gray-700 py-3">{job.detailer || job.assignedTo || 'N/A'}</td>
                          <td className="text-gray-700 py-3">
                            <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                              job.status === 'Completed' ? 'bg-green-100 text-green-800' :
                              job.status === 'In Progress' ? 'bg-yellow-100 text-yellow-800' :
                              'bg-gray-100 text-gray-800'
                            }`}>
                              {job.status || 'Pending'}
                            </span>
                          </td>
                          <td className="text-gray-700 py-3 font-medium">{duration}</td>
                          <td className="text-gray-700 py-3">
                            {startTime ? DateUtils.formatDateTime(startTime) : 'N/A'}
                          </td>
                          <td className="text-gray-700 py-3">
                            {endTime ? DateUtils.formatDateTime(endTime) : 'N/A'}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
              </table>
            </div>
          </div>
        </div>
      )}
      </div>
    </div>
  );
}



// Main Component - Enhanced with professional error handling
export default function FirebaseV2() {
  const [user, setUser] = useState(null);
  const [error, setError] = useState(null);

  // Performance-optimized login handler
  const handleLogin = useCallback((userData) => {
    Logger.info('User login successful', { 
      userId: userData?.id, 
      role: userData?.role,
      name: userData?.name 
    });
    setUser(userData);
    setError(null);
  }, []);

  // Performance-optimized logout handler
  const handleLogout = useCallback(() => {
    Logger.info('User logout');
    setUser(null);
    setError(null);
  }, []);

  // Enhanced error handling
  const handleError = useCallback((errorMessage, error = null) => {
    Logger.error('Application error', error, { errorMessage });
    setError(errorMessage);
  }, []);

  // Show error with professional styling
  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 p-4">
        <div className="bg-white rounded-xl p-6 border border-red-200 shadow-lg max-w-md w-full">
          <div className="text-center">
            <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
              </svg>
            </div>
            <h2 className="text-red-800 font-bold mb-2">Application Error</h2>
            <p className="text-red-700 mb-4">{error}</p>
            <div className="flex gap-2 justify-center">
              <button 
                onClick={() => setError(null)}
                className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
              >
                Try Again
              </button>
              <button 
                onClick={() => window.location.reload()}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
              >
                Refresh Page
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Main app render
  return (
    <Suspense fallback={
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-gray-900 text-xl">Loading...</div>
      </div>
    }>
      {!user ? (
        <LoginForm onLogin={handleLogin} />
        ) : (
          <MainApp 
            user={user} 
            onLogout={handleLogout} 
            onError={handleError}
          />
        )}
    </Suspense>
  );
}

// Manager Settings View
function SettingsView({ settings, onSettingsChange }) {
  const [siteTitle, setSiteTitle] = useState(settings?.siteTitle || 'Cleanup Tracker');
  const [csvUrl, setCsvUrl] = useState(settings?.inventoryCsvUrl || '');
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    setSiteTitle(settings?.siteTitle || 'Cleanup Tracker');
    setCsvUrl(settings?.inventoryCsvUrl || '');
  }, [settings]);

  const saveSettings = async () => {
    setSaving(true);
    try {
      // Save site title
      await V2.put('/settings', { key: 'siteTitle', value: siteTitle });
      // Save CSV URL using settings (and also set-csv for compatibility)
      if (csvUrl?.trim()) {
        try {
          await V2.post('/vehicles/set-csv', { url: csvUrl.trim() });
        } catch (_) {
          // fallback to generic settings endpoint
          await V2.put('/settings', { key: 'inventoryCsvUrl', value: csvUrl.trim() });
        }
      }
      const res = await V2.get('/settings');
      onSettingsChange(res.data || {});
      alert('Settings saved.');
    } catch (err) {
      alert('Failed to save settings: ' + (err.response?.data?.error || err.message));
    } finally {
      setSaving(false);
    }
  };

  const saveAndImport = async () => {
    await saveSettings();
    try {
      await V2.post('/vehicles/refresh');
      alert('Inventory refreshed from CSV.');
    } catch (err) {
      alert('Refresh failed: ' + (err.response?.data?.error || err.message));
    }
  };

  const refreshOnly = async () => {
    try {
      await V2.post('/vehicles/refresh');
      alert('Inventory refreshed.');
    } catch (err) {
      alert('Refresh failed: ' + (err.response?.data?.error || err.message));
    }
  };

  return (
    <div className="space-y-6">
      <section className="bg-white rounded-xl p-6 border border-gray-200">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">General</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 text-sm mb-2">Site Title</label>
            <input
              type="text"
              value={siteTitle}
              onChange={(e) => setSiteTitle(e.target.value)}
              className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-gray-400"
              placeholder="Cleanup Tracker"
            />
          </div>
        </div>
      </section>

      <section className="bg-white rounded-xl p-6 border border-gray-200">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">Inventory Source</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-gray-700 text-sm mb-2">Google Sheets CSV URL</label>
            <input
              type="url"
              value={csvUrl}
              onChange={(e) => setCsvUrl(e.target.value)}
              placeholder="https://docs.google.com/spreadsheets/.../pub?output=csv"
              className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
          <div className="flex gap-2">
            <button onClick={saveSettings} disabled={saving} className="px-3 py-2 rounded bg-blue-600 hover:bg-blue-700 text-white text-sm disabled:bg-gray-400">Save</button>
            <button onClick={saveAndImport} disabled={saving} className="px-3 py-2 rounded bg-green-600 hover:bg-green-700 text-white text-sm disabled:bg-gray-400">Save & Import</button>
            <button onClick={refreshOnly} className="px-3 py-2 rounded bg-gray-600 hover:bg-gray-700 text-white text-sm">Refresh Inventory</button>
          </div>
        </div>
      </section>
    </div>
  );
}

// Personal Settings View (for both roles)
function MySettingsView({ user }) {
  const [name, setName] = useState(user?.name || '');
  const [pin, setPin] = useState('');
  const [saving, setSaving] = useState(false);

  const save = async () => {
    if (!name.trim()) return alert('Name is required');
    
    // Restrict PIN changes for detailers
    if ((user.role === 'detailer' || user.role === 'technician') && pin) {
      return alert('PIN changes are not allowed for detailers. Contact your manager.');
    }
    
    if (pin && pin.length !== 4) return alert('PIN must be 4 digits');
    setSaving(true);
    try {
      // Fetch latest user from API list to get ID mapping
      const all = await V2.get('/users');
      const me = (all.data || []).find(u => u.id === user.id || u.pin === user.pin || u.name === user.name);
      if (!me) return alert('Cannot locate your profile');
      
      // Only include PIN in update if user is manager
      const updateData = { name, role: me.role };
      if (user.role === 'manager' && pin) {
        updateData.pin = pin;
      }
      
      await V2.put(`/users/${me.id}`, updateData);
      alert('Profile updated');
    } catch (err) {
      alert('Failed to update: ' + (err.response?.data?.error || err.message));
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="max-w-md mx-auto space-y-4">
      <div className="bg-white rounded-xl p-6 border border-gray-200">
        <h3 className="text-gray-900 font-semibold text-lg mb-4">My Settings</h3>
        <div className="space-y-3">
          <div>
            <label className="block text-gray-700 text-sm mb-1">Name</label>
            <input
              type="text"
              value={name}
              onChange={e => setName(e.target.value)}
              className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-gray-400"
            />
          </div>
          {user.role === 'manager' && (
            <div>
              <label className="block text-gray-700 text-sm mb-1">New PIN (optional)</label>
              <input
                type="password"
                inputMode="numeric"
                pattern="[0-9]*"
                maxLength={4}
                value={pin}
                onChange={e => setPin(e.target.value.replace(/\D/g, ''))}
                className="w-full bg-gray-50 text-gray-900 placeholder-gray-500 border border-gray-300 rounded-lg py-2 px-3 focus:outline-none focus:ring-2 focus:ring-gray-400"
              />
            </div>
          )}
          {(user.role === 'detailer' || user.role === 'technician') && (
            <div className="bg-amber-50 border border-amber-200 rounded-lg p-3">
              <p className="text-amber-800 text-sm">
                🔒 PIN changes are restricted for detailers. Contact your manager to update your PIN.
              </p>
            </div>
          )}
          <button onClick={save} disabled={saving} className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg transition-colors disabled:bg-gray-500">
            {saving ? 'Saving…' : 'Save Changes'}
          </button>
        </div>
      </div>
    </div>
  );
}

// QC View Component for Managers
function QCView({ jobs, users, currentUser, onRefresh }) {
  
  // Get jobs that need QC review
  const qcJobs = jobs.filter(job => job.status === 'QC Required' || job.status === 'qc_required');
  
  const handleQCApprove = async (job) => {
    try {
      await V2.put(`/jobs/${job.id}/status`, { status: 'Completed' });
      onRefresh();
      alert('Job approved and marked as completed!');
    } catch (error) {
      console.error('Failed to approve job:', error);
      alert('Failed to approve job: ' + (error.response?.data?.error || error.message));
    }
  };
  
  const handleQCReject = async (job, reason) => {
    try {
      await V2.put(`/jobs/${job.id}/status`, { 
        status: 'In Progress',
        qcNotes: reason 
      });
      onRefresh();
      alert('Job sent back for rework');
    } catch (error) {
      console.error('Failed to reject job:', error);
      alert('Failed to reject job: ' + (error.response?.data?.error || error.message));
    }
  };

  return (
    <div className="p-8 max-w-6xl mx-auto">
      <div className="mb-8">
        <h2 className="text-3xl font-bold text-gray-900 mb-2">Quality Control Dashboard</h2>
        <p className="text-gray-600">Review and approve completed jobs before final delivery</p>
      </div>

      {/* QC Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-yellow-50 rounded-xl p-6 border border-yellow-200">
          <h3 className="text-yellow-700 font-semibold mb-2">Pending Review</h3>
          <p className="text-3xl font-bold text-yellow-900">{qcJobs.length}</p>
        </div>
        <div className="bg-green-50 rounded-xl p-6 border border-green-200">
          <h3 className="text-green-700 font-semibold mb-2">Approved Today</h3>
          <p className="text-3xl font-bold text-green-900">
            {jobs.filter(job => {
              const today = new Date().toISOString().split('T')[0];
              return job.status === 'Completed' && job.completedAt && 
                     new Date(job.completedAt).toISOString().split('T')[0] === today;
            }).length}
          </p>
        </div>
        <div className="bg-red-50 rounded-xl p-6 border border-red-200">
          <h3 className="text-red-700 font-semibold mb-2">Rejected Today</h3>
          <p className="text-3xl font-bold text-red-900">
            {jobs.filter(job => {
              const today = new Date().toISOString().split('T')[0];
              return job.qcNotes && job.updatedAt && 
                     new Date(job.updatedAt).toISOString().split('T')[0] === today;
            }).length}
          </p>
        </div>
      </div>

      {/* Jobs Needing Review */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <h3 className="text-xl font-semibold text-gray-900">Jobs Awaiting QC Review</h3>
        </div>
        
        {qcJobs.length === 0 ? (
          <div className="p-12 text-center">
            <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h4 className="text-lg font-medium text-gray-900 mb-2">All caught up!</h4>
            <p className="text-gray-600">No jobs are currently waiting for quality control review.</p>
          </div>
        ) : (
          <div className="divide-y divide-gray-200">
            {qcJobs.map((job) => (
              <div key={job.id} className="p-6">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h4 className="text-lg font-semibold text-gray-900">
                        {job.year} {job.make} {job.model}
                      </h4>
                      {job.vehicleColor && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                          {job.vehicleColor}
                        </span>
                      )}
                    </div>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm mb-4">
                      <div>
                        <p className="text-gray-500 font-medium">VIN</p>
                        <p className="font-mono">{job.vin}</p>
                      </div>
                      <div>
                        <p className="text-gray-500 font-medium">Stock</p>
                        <p>{job.stockNumber}</p>
                      </div>
                      <div>
                        <p className="text-gray-500 font-medium">Service</p>
                        <p>{job.serviceType}</p>
                      </div>
                      <div>
                        <p className="text-gray-500 font-medium">Technician</p>
                        <p>{job.technicianName}</p>
                      </div>
                    </div>
                    {job.completedAt && (
                      <p className="text-sm text-gray-600">
                        Completed: {new Date(job.completedAt).toLocaleString()}
                      </p>
                    )}
                  </div>
                  
                  <div className="flex gap-2 ml-4">
                    <button
                      onClick={() => handleQCApprove(job)}
                      className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg font-medium transition-colors flex items-center gap-2"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                      </svg>
                      Approve
                    </button>
                    <button
                      onClick={() => {
                        const reason = prompt('Enter reason for rejection (this will be sent back to the technician):');
                        if (reason) handleQCReject(job, reason);
                      }}
                      className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg font-medium transition-colors flex items-center gap-2"
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                      Reject
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
